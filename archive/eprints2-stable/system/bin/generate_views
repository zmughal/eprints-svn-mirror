#!/usr/local/bin/perl5.8.0 -w -I/opt/ep2stable/perl_lib 

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<generate_views> - Generate static browse pages for an EPrint archive

=head1 SYNOPSIS

B<generate_views> I<archiveid> [B<options>] 

=head1 DESCRIPTION

This script renders static "browse views" for an EPrint Archive.

What this does is generate browse pages for each field configured as browsable in B<ArchiveConfig.pm>. It creates a static web page for each value of that field, and index pages to navigate to them. 

For example, if we make "year" browseable then this script will generate one page for each unique value of the year field. So a user can then view the 1995 page and see links to all the 1995 eprints.

Advantages of this are that this puts less load on the database than user searches. Assuming you pick two or three sensible fields to make browsable. 

This script should be run every hour or so, but that should once a day or even once a week on large archives, as the more eprints the longer it will take to run. The rough length of time to run this is of the order of O( B<languages> * B<eprints> * B<browsable fields> ).  You can automate running this with the B<cron> system.

=head1 ARGUMENTS

=over 8

=item B<archiveid> 

The ID of the eprint archive to use.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

__GENERICPOD__

=cut

#cjg NOT doing noise right.
#cjg not aktually working...

use EPrints::EPrint;
use EPrints::Session;
use EPrints::Subject;

use File::Copy;
use File::Path;
use strict;
use Getopt::Long;
use Pod::Usage;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "generate_views" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 ); 

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

my $PATH = "view";

# Set STDOUT to auto flush (without needing a \n)
$|=1;


#  # TODO:
# Clean up sub page/index titles 
# Clean up for release
# make id fields work
# make dir spcified on cmd line optionally.

EPrints::Session::start( $ARGV[0] , $noise ) or exit( 1 );

# cjg Would be nice to have multiple field browsing eg.
# "creators.id/editors.id" but that can be done later.

my $views = &ARCHIVE->get_conf( "browse_views" );

my $ds = &ARCHIVE->get_dataset( "archive" );

foreach my $langid ( @{&ARCHIVE->get_conf( "languages" )} )
{
	&SESSION->change_lang( $langid );
	my $dir = &ARCHIVE->get_conf( "htdocs_path" )."/".$langid."/".$PATH;
	my $tmpdir = $dir."_tmp";
	my $doomdir = $dir."_toerase";

	if( -e $tmpdir ) { rmtree( $tmpdir ); }
	EPrints::Utils::mkdir( $tmpdir );

	foreach my $view ( @{$views} )
	{
		#print "Making browse pages for: $langid/".$view->{id}."\n" if( $noise > 0 );

		my @f = split( ',', $view->{fields} );
		my $fieldids = \@f;

		make_menu( 
			$tmpdir.'/'.$view->{id}, 
			$ds, 
			$view, 
			$fieldids, 
			[],
			$noise );
	}

	# Make Browse Page which lists various views

	print "Making main browse index for: $langid ... " if( $noise > 1 );
	my( $ul, $li, $page, $a, $file, $title );
	$page = &SESSION->make_doc_fragment();
	$page->appendChild( &SESSION->html_phrase( "bin/generate_views:browseintro" ) );
	$ul = &SESSION->make_element( "ul" );
	foreach my $view ( @{$views} )
	{
		next if( $view->{nolink} );
		$li = &SESSION->make_element( "li" );
		$a = &SESSION->render_link( $view->{id}."/" );
		$a->appendChild( &SESSION->make_text( 
			&SESSION->get_view_name( $ds, $view->{id} ) ) );
		$li->appendChild( $a );
		$ul->appendChild( $li );
	}
	$page->appendChild( $ul );
	
	$title = &SESSION->html_phrase( "bin/generate_views:browsetitle" );
	$file = $tmpdir."/index.html";
	&SESSION->build_page( $title, $page, "browsemain" );
	&SESSION->page_to_file( $file );
	print "done\n" if( $noise > 1 );

	print "Moving $langid views to be online ... " if( $noise > 1 );
	move( $dir, $doomdir );
	move( $tmpdir, $dir );
	rmtree( $doomdir );
	print "done\n" if( $noise > 1 );
}

exit;

sub get_fields_from_config
{
	my( $ds, $ids ) = @_;

	$ids =~ s/^-//;
	my @fields;
	foreach my $fieldid ( split( "/", $ids ))
	{
		my $field = EPrints::Utils::field_from_config_string( 
					$ds, 
					$fieldid );

		unless( $field->is_browsable() )
		{
#cjg should abort here. Or maybe just log.
			print STDERR "Cannot generate browse pages for field \"".$_."\"\n";
			print STDERR "- Type \"".$field->get_type()."\" cannot be browsed.\n";
			next;
		}
		push @fields, $field;
	}
	if( scalar @fields == 0 ) { return; }

	return @fields
}


sub get_pfilter_count
{
	my( $ds, $pfilters, $mode ) = @_;

	$mode = 'EX' unless( defined $mode );

	my $count = -1;

	if( scalar @{$pfilters} )
	{
		my $searchexp = new EPrints::SearchExpression(
					satisfy_all=>1,
					dataset=>$ds );
		foreach my $filter ( @{$pfilters} )
		{
     			$searchexp->add_field( 
					$filter->[0], 
					$filter->[1], 
					$mode );
		}
      		$searchexp->perform_search();
		$count = $searchexp->count();
		$searchexp->dispose;
	}
	return $count;
}
	

sub get_filtered_values
{
	my( $ids, $pfilters, $view, $fields ) = @_;

	my $reverse_list = 0;
	if( $ids =~ s/^-// )
	{
		$reverse_list = 1;
	}

	my @values = ();
	if( scalar @{$fields} == 1 )
	{
		my $vref = $fields->[0]->get_values( $ds );
		@values = @{$vref};
	}
	elsif( $fields->[0]->is_type( "name" ) )
	{
		my %v=();
		foreach my $field ( @{$fields} )
		{
			my $vref = $field->get_values( $ds );
			foreach( @{$vref} )
			{
				if( !defined $_ ) { $_=""; }
				$_->{given} = '' unless defined( $_->{given} );
				$_->{family} = '' unless defined( $_->{family} );
				$v{$_->{given}.':'.$_->{family}}=$_; 
			}
		}
		@values = values %v;
	}
	else
	{
		my %v = ();
		foreach my $field ( @{$fields} )
		{
			my $vref = $field->get_values( $ds );
			foreach( @{$vref} )
			{ 
				if( !defined $_ ) { $_=""; }
				$v{$_}=1; 
			}
		}
		@values = keys %v;
	}

	if( !$view->{allow_null} )
	{
		my @ov = @values;
		@values = ();
		foreach( @ov )
		{
			next if( $_ eq "" );
			push @values, $_ 
		}
	}

	
	my $ov = {};

	my $o_v = $fields->[0]->sort_values( \@values );

	if( $reverse_list )
	{
		@values = reverse @{$o_v};
	}
	else
	{
		@values = @{$o_v};
	}

	return( @values );
}

sub make_menu
{
	my( $dir, $ds, $view, $fieldids, $pfilters, $noise ) = @_;

	EPrints::Utils::mkdir( $dir );

	# head & tail
	my( $levelids, @sublevelids ) = @{$fieldids};

	my $count = get_pfilter_count( $ds, $pfilters );

	if( $count == 0 )
	{
		unless( EPrints::Utils::is_set( $view->{nocut} ) && $view->{nocut} )
		{
#print STDERR  "cjg: Nothing here. Cut.\n";
				return 0;
		}
	}

	my @fields = get_fields_from_config( $ds, $levelids );

	my @values = get_filtered_values( $levelids, $pfilters, $view, \@fields );

	my $has_submenu = ( scalar @sublevelids > 0 );

	# if !$has_submenu && graph
	# render: graph page & return

	#################################
	#
	# Render the pages or recurse the next level of menus
	#
	#################################

	my $show_sizes = undef;
	if( $fields[0]->is_type( "subject" ) )
	{
		$show_sizes = {};
		foreach my $value ( @values )
		{
			my( $filters ) = [ @{$pfilters}, [ \@fields, $value ] ];
			$show_sizes->{$value} = get_pfilter_count( $ds, $filters,'EQ' );
		}
	}


	my %size = ();
	foreach my $value ( @values )
	{
		my $fileid = mk_file_id( $value, $fields[0]->get_type );

		my( $filters ) = [ @{$pfilters}, [ \@fields, $value ] ];

		if( $has_submenu )
		{
			$size{$value}=make_menu( 
				$dir.'/'.$fileid,
				$ds, 
				$view, 
				[@sublevelids], 
				$filters,
				$noise );

			next;
		}
		

		my $page = &SESSION->make_doc_fragment;
			
		my @sh_ids = ();
		if( defined $view->{subheadings} )
		{
			 @sh_ids = split( ',', $view->{subheadings} );
		}
		my( $list, $n ) = render_list(
			$view, 
			$filters,
			\@sh_ids,
			$view->{heading_level} );

		$size{$value} = $n;

		unless( $view->{nocount} )
		{
			$page->appendChild( &SESSION->html_phrase( 
				"bin/generate_views:blurb",
				n=>&SESSION->make_text( $size{$value} ) ) );
		}
		$page->appendChild( $list );

		unless( $view->{notimestamp} )
		{
			$page->appendChild( &SESSION->html_phrase(
				"bin/generate_views:timestamp",
				time=>&SESSION->make_text(
				EPrints::Utils::get_timestamp() ) ) );
	       	}


		# render page
		if( $view->{include} )
		{
			my $file = $dir."/".$fileid.".include";
			print "Writing: $file\n" if( $noise > 1 );
			open( FILE, ">$file" );
			print FILE EPrints::XML::to_string( $page, undef, 1 );
			close FILE;
		}

		if( $view->{nohtml} )
		{
			EPrints::XML::dispose( $page );
			next;
		}

		my $pagedesc = &SESSION->make_doc_fragment;
		foreach my $pfilter ( @{$pfilters} )
		{
			$pagedesc->appendChild( $pfilter->[0]->[0]->get_value_label( &SESSION, $pfilter->[1] ) );
			$pagedesc->appendChild( &SESSION->make_text( " / " ) );
		}
		$pagedesc->appendChild( $fields[0]->get_value_label( $value ) );
		my $title = &SESSION->html_phrase( 
			"bin/generate_views:title", 
			viewname=>&SESSION->make_text( 
				&SESSION->get_view_name( $ds, $view->{id} ) ),
			value=>$pagedesc );
		my $htmlpage = &SESSION->make_doc_fragment;

		if( $fields[0]->is_type( "subject" ) )
		{
			my $subject = EPrints::Subject->new( $value );
			my @ids= @{$subject->get_value( "ancestors" )};
			foreach( $subject->children() )
			{
				push @ids,$_->get_value( "subjectid" );
			}
			foreach my $field ( @fields )
			{
				$htmlpage->appendChild( 
					&SESSION->render_subjects( 
						\@ids, 
						$field->get_property( "top" ), 
						$value, 
						2, 
						$show_sizes ) );
			}

			$htmlpage->appendChild( &SESSION->render_ruler() );
		}

		$htmlpage->appendChild( $page );

		my $file = $dir."/".$fileid.".html";
		&SESSION->build_page( $title, $htmlpage, "browseview" );
		print "Writing: $file\n" if( $noise > 1 );
		&SESSION->page_to_file( $file );
	}

	#################################
	#
	# Render the menu page
	#
	#################################

	return if( $view->{noindex} );

	my $page = &SESSION->make_doc_fragment();
	$page->appendChild( 
		&SESSION->html_phrase( "bin/generate_views:intro" ) );

	$show_sizes = \%size unless defined( $show_sizes );	
	if( $fields[0]->is_type( "subject" ) )
	{
		$page->appendChild( render_subj_menu( 
					$view,
					$show_sizes,
					\@values,
					\@fields,
					$has_submenu ) );
	}	
	else
	{
		$page->appendChild( render_menu( 
					$view,
					$show_sizes,
					\@values,
					\@fields,
					$has_submenu ) );
	}	
	
	my $title = get_index_title( $pfilters, $ds, $view );

	if( $view->{include} )
	{
		my $file = $dir."/index.include";
		print "Writing: $file\n" if( $noise > 1 );
		open( FILE, ">$file" );
		print FILE EPrints::XML::to_string( $page, undef, 1 );
		close FILE;
	}
	
	my $file = $dir."/index.html";
	&SESSION->build_page( $title, $page, "browseindex" );
	print "Writing: $file\n" if( $noise > 1 );
	&SESSION->page_to_file( $file );

	return( $count );
}


sub render_subj_menu
{
	my( $view, $sizes, $values, $fields, $has_submenu ) = @_;

	my $subjects_to_show = $values;

	if( $view->{hideempty} )
	{
		my %show = ();
		foreach my $value ( @{$values} )
		{
			next unless( $sizes->{$value} > 0 );
			my $subject = EPrints::Subject->new( $value );
			my @ids= @{$subject->get_value( "ancestors" )};
			foreach my $id ( @ids ) { $show{$id} = 1; }
		}
		$subjects_to_show = [];
		foreach my $value ( @{$values} )
		{
			next unless( $show{$value} );
			push @{$subjects_to_show}, $value;
		}
	}

	my $f = &SESSION->make_doc_fragment;
	foreach my $field ( @{$fields} )
	{
		$f->appendChild(
			&SESSION->render_subjects(
				$subjects_to_show,
				$field->get_property( "top" ),
				undef,
				($has_submenu?3:2),
				$sizes ) );
	}
	return $f;
}


sub render_menu
{
	my( $view, $sizes, $values, $fields, $has_submenu ) = @_;

	my $ul = &SESSION->make_element( "ul" );

	foreach my $value ( @{$values} )
	{
		next if( $view->{hideempty} && $sizes->{$value} == 0 );

		my $fileid = &mk_file_id( $value, $fields->[0]->get_type );

		my $li = &SESSION->make_element( "li" );

		my $link = $fileid;
		if( $has_submenu )
		{
			$link .= '/';
		}
		else
		{
			$link .= '.html';
		}
		my $a = &SESSION->render_link( $link );
		$a->appendChild( $fields->[0]->get_value_label( $value ) );
		$a->appendChild( 
			&SESSION->make_text( " (".$sizes->{$value}.")" ) );
		$li->appendChild( $a );
		$ul->appendChild( $li );
	}

	return $ul;
}


sub get_index_title
{
	my( $pfilters, $ds, $view ) = @_;

	unless( scalar @{$pfilters} )
	{
		# top level index
		return &SESSION->html_phrase( 
			"bin/generate_views:indextitle", 
			viewname=>&SESSION->make_text( 
				&SESSION->get_view_name( $ds, $view->{id} ) ) );
	}
		
	# sub level index
	my $pagedesc = &SESSION->make_doc_fragment;
	my $first = 1;
	foreach my $pfilter ( @{$pfilters} )
	{
		if( !$first )
		{
			$pagedesc->appendChild( &SESSION->make_text( " / " ) );
		}
		$pagedesc->appendChild( 
			$pfilter->[0]->[0]->get_value_label( $pfilter->[1] ) );
		$first = 0;
	}
	
	return &SESSION->html_phrase( 
			"bin/generate_views:title", 
			viewname=>&SESSION->make_text( 
					&SESSION->get_view_name( 
						$ds, 
						$view->{id} ) ),
			value=>$pagedesc );
}


sub render_list
{
	my( $view, $pfilters, $subheadings, $level ) = @_;

	if( !defined $level ) 
	{
		$level = 2;
	}

	if( defined $subheadings && scalar @{$subheadings} > 0 )
	{
		my( $heading_ids, @subheading_ids ) = @{$subheadings};
		my $part = &SESSION->make_doc_fragment;

		my @fields = get_fields_from_config( $ds, $heading_ids );

		my @values = get_filtered_values( $heading_ids, $pfilters, $view, \@fields );

		my $count = 0;

		foreach my $value ( @values )
		{
			my( $filters ) = [ @{$pfilters}, [ \@fields, $value ] ];
			my( $list, $sh_count ) = render_list( 
				$view, 
				$filters, 
				\@subheading_ids, 
				$level+1 );
			
			if( $sh_count == 0 )
			{
				EPrints::XML::dispose( $list );
				next;
			}

			$count += $sh_count;

			if( $level > 6 ) { $level = 6; } # can't go past h6

			my $heading = &SESSION->make_element( "h".$level );
			$heading->appendChild( 
				$fields[0]->get_value_label( $value ) );
			$part->appendChild( $heading );
			$part->appendChild( $list );
		
		}

		return( $part, $count );
	}

	my $links;
	if( !defined $view->{layout} )
	{
		$links = &SESSION->make_doc_fragment();
	}
	elsif( $view->{layout} eq "orderedlist" )
	{
		$links = &SESSION->make_element( "ol" );
	}
	elsif( $view->{layout} eq "unorderedlist" )
	{
		$links = &SESSION->make_element( "ul" );
	}
	else
	{
		$links = &SESSION->make_doc_fragment();
	}

	my $fn = sub { 
       		my( $dataset, $item, $view ) = @_;

		my $cite = $item->render_citation_link( 
			$view->{citation} );
		if( $view->{layout} eq "paragraph" )
		{
			my $p = &SESSION->make_element( "p" );
			$p->appendChild( $cite );
			$cite = $p;
		}
		elsif( 
			$view->{layout} eq "orderedlist" ||
			$view->{layout} eq "unorderedlist" )
		{
			my $li = &SESSION->make_element( "li" );
			$li->appendChild( $cite );
			$cite = $li;
		}
		#otherwise layout is "none"

		$links->appendChild( &SESSION->make_indent( 4 ) );
		$links->appendChild( $cite );
	};
	
	my $searchexp = new EPrints::SearchExpression(
				custom_order=>$view->{order},
				satisfy_all=>1,
				dataset=>$ds );
	foreach my $filter ( @{$pfilters} )
	{
     		$searchexp->add_field( $filter->[0], $filter->[1], "EX" );
	}
      	$searchexp->perform_search();
	my $count = $searchexp->count();

	my %mapinfo = %{$view};
	$mapinfo{links} = $links;
	if( !defined $mapinfo{layout} )
	{
		$mapinfo{layout} = "paragraph";
	}
	$searchexp->map( $fn, \%mapinfo );
	$searchexp->dispose();
	
	return( $links, $count );
}


sub mk_file_id
{
	my( $value, $type ) = @_;

	my $fileid = $value;
	if( $type eq "name" )
	{
		$fileid = EPrints::Utils::make_name_string( $value );
	}

	return EPrints::Utils::escape_filename( $fileid );
}








