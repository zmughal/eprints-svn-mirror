The Eprints CVS Repository Module
=================================


The repository is divided into 5 directories.

documentation     - unsurprisingly, contains the documentation. It's all done in
                    latex, which means it's easy to make PDF and HTML.
release           - stuff to do with packaging releases together (install
                    scripts and the like)
system            - the code itself
transfer          - contains the code I used to transfer stuff from the old
                    CogPrints software to the Eprints version. You won't need
                    to use this any more, but might find the code useful to
                    look at.
website           - contains the scripts and content that build the
                    www.eprints.org Web site.


This README also contains information about the CogPrints server.


In order to be able to build the packages, the eprints.org web site, you'll need
to install a few other packages:

GIMP 1.0.4 - for making the navigation bar buttons on the www.eprints.org
website. You'll need to make sure the script-fu path includes the website/
directory, e.g. by adding to your ~/.gimp/gimprc:

(script-fu "/home/blah/eprints/webite:/usr/share/gimp/script-fu")

autoconf 2.13 - for making the "configure" script (also needs GNU m4)

latex and pdflatex, with the graphicx and tabularx packages installed. For the
documentation.

latex2html - to make the HTML version of the documentation.



tags
====

Each release of eprints is tagged. There are tags eprints-beta-1,
eprints-beta-2, and eprints-1_0. Later releases should be tagged appropriately.

I used to have cogprints as the main branch and the distribution as a separate
branch, but this caused lots of hassle, so now eprints is the main branch, and
cogprints is just on the cogprints machine. The cogprints setup is so close to
the default eprints one that it shouldn't cause any problems. There's an old
branch with the tag "eprints-dist" - ignore it.


documentation
=============

The documentation is in three parts: online-help, installation, and system. It
should be fairly obvious what each one is about. They each have the same
directory structure (latex source goes in a latex directory, images below that).
They each also have a main "header" file, with an introduction; the guts of each
are in separate files so that you can play around and make a bigger document
with everything in if you want.

There's a handy "Makefile" in the documentation directory that will make things
in PDF or HTML. "make all" makes everything. There is also an
"install-online-help" rule that will hack about with the online help, putting
in original jpeg images instead of nasty converted-from-EPS ones, and removing
the HTML headers so it can be given the eprints site skin, and then installs it
in the eprints/system tree appropriately. [OK, so it's maybe not 100% optimal
to have stuff that's generated by stuff in the CVS repository also in the CVS
repository, but it saves an awful lot of hassle.]

You'll have to install the system documentation and installation document into
the website/ directory by hand. Though I'm sure coming up with a rule in the
makefile to do this wouldn't be hard, I just ran out of time.


release
=======

Contains stuff for packaging up releases.

install-scripts  - This is actually just copied into the release directory.
Contains the autoconf stuff (automake isn't used,) ChangeLog, and a couple of
scripts that the installer stuff uses.

licenses - contains license texts for each version, inserted into the code.

old-packages - contains all released versions as tar.gz's.

utils - a place to put anything handy. Just one script in there in the moment I
used to make the "core_dirs_exe=" type lines listing the directories in the
release.

The makepackage.sh script does everything to put a package together. In short:

exports the relevant version (default is HEAD, i.e. the latest stuff) 
reorganises the directory structure slightly (i.e. lib and site_lib become
perl_lib/EPrints and perl_lib/EPrintSite respectively, so that perl_lib can be
added to perl's @INC path)
inserts the license text
adds the installation script stuff (contents of the install-scripts dir)
makes a .tar.gz


system
======

This is where the code is. A few things to note:

In the release, lib and site_lib become perl_lib/EPrints and
perl_lib/EPrintSite. They're called lib and site_lib in the repository because
I hadn't thought of the better way of organising the directories when I created
it, and moving the directories would result in the loss of all the log
information (and version tags etc. etc.)

It's perfectly possible to do a cvs checkout and then do some symlink stuff to
make a working eprints archive that directly runs the checked out code. This is
probably the easiest way to do development. However: You need to be careful
when comitting changes to the code in the repository, not to commit changes
that you made in order to make the checked out version work; i.e. don't commit:

- A SiteInfo.pm with hostname information and so one
- anything in cfg/ you've changed from the site default configuration
- likewise for SiteRoutines.pm and Validate.pm.

When the new open archives protocol is released, you will be able to dispense
with the entire openarchives/ directory (do a cvs remove) since that just
contains the old Dienst stuff. You will also be able to remove stuff from
lib/OpenArchives.pm below the comment where it says "EVERYTHING BELOW HERE
PERTAINS TO THE OLD, DIENST-BASED OPEN ARCHIVES STANDARD", and likewise in
SiteInfo.pm. Also, in eprints/release/update_apache_conf, you should remove all
the RewriteEngine stuff, and remove it from the installation document, as the
RewriteEngine module is only used by the old Dienst stuff.

The oai-0.2 script in cgi/ supports the 0.2 version of OAI. When the new
protocol comes out, it'll probably be best to rename it "oai". You'll have to
cvs remove oai-0.2 and cvs add oai. (Because it's just a file, the log
information isn't lost in the same way.)


transfer
========

Just a couple of scripts I used to bulk import the old CogPrints data. You
won't need to run them but they might be useful examples.


website
=======

The stuff in here is used to build and install the eprints.org site. You'll
need the password for the user "eprints" on the machine "orgs.ecs.soton.ac.uk"
to do the actual install. I won't put the password here for obvious security
reasons.

Simple instructions first. Edit the files in in-html/ and in-html-fr WITH A TEXT
EDITOR, NOT WITH NETSCAPE COMPOSER OR SUCHLIKE. Then run "make". This will put a
mockup site in the "out" directory. If you're happy with it run "make install"
which will make the site and install it on the www.eprints.org site.

The build-site.pl script does most of the work. It collects stuff from a site
config file, and the following directories, to build the site.

in-html  - The HTML content of the site, MINUS the HTML heads. Each HTML file
needs to start with "TITLE: The page's title" and then launch straight in as if
the <BODY> tag had already been opened. Don't close with </BODY> or </HTML> at
the end of the file, these are added by the script.

in-html-fr - as in-html, for French pages.

in-raw - files which are just copied straight to the site as-is, e.g. image
files, pdf files, and the eprints .tar.gz packages.

dolots.scm and mmrg-sideicons.scm are gimp script-fu scripts (scheme) that make
the nice buttons on the navigation bar.

The Makefile contains rules to build a mock-up site so you can preview what the
site will look like, and to build and install the main site.

site.cfg and site-fr.cfg contain the configuration files for build-site.pl for
the English and French versions, respectively. Newer languages should be added
in a similar way.

template.html contains the www.eprints.org site "skin" (not to be confused with
the skin the eprints _archive software_ uses). Use the placeholders that will
be substituted by the appropriate text rather than the text itself:

TITLE_PLACEHOLDER for the title of the page (given by the TITLE: line of the
in-html files)
NAVIGATION_BAR - the navigation bar
BODY_PLACEHOLDER - where the main text goes
MODIFIED_PLACEHOLDER - date the page was modified gets put here (this is the
date that the appropriate file in "in-html" was modified, as opposed to the
date the site is built)

In the site.cfg file...

IN_HTML: directory to read in html files (default is "in-html")
IN_RAW: directory to read in non-html files to put on the site

MAIN_FG, MAIN_BG, NAV_FG_*, NAV_BG_*: define the colours for each component 
here (should be fairly obvious which is which)

Then you define what icons go on the navigation bar:

ICON_HTML:filename:Icon Text

This puts an icon with "Icon Text" in the navigation bar,linked to
filename.html. filename.html needs to exist in in-html (or whatever IN_HTML is
set to.) The icon images will be called filename_hi.gif and filename_lo.gif for
selected and unselected versions respectively.  (Note that you don't put the
.html extension in the line.)

ICON_URL:filename:Icon Text:http://the.url/

Puts an icon linking to the given explicit URL. Note that "filename" is just
used for the image filenames in this case.

HTML:filename:

(Last colon necessary.) Means get "filename.html" from in-html (or whatever
IN_HTML is) and put it on the site, but WITHOUT an icon in the navigation bar.

SITEROOT: This is the URL of the site. This can be overridden with command line
arguments to build_site.pl. Should always be http://www.eprints.org/

HTMLROOT: Where the HTML files in the IN_HTML directory will be accessed. So
for the French pages, this is http://www.eprints.org/fr/. (last slash
important.) If omitted, assumed to be the same as SITEROOT.

NAV_SEPARATOR: The HTML that's lobbed in between the navigation bar icons.

OUT: Where to write the skinned HTML and raw files.


Hopefully you will be able to work out from the existing setup how to add new
pages in other languages. Just copy the methods that are there. It's easy to
add pages in other languages and have the navigation bar links go to the
English pages if you don't have the translation for all pages on the site.




The CogPrints Machine Setup
===========================

The CogPrints has a fairly standard installation of Eprints, with a few extra
scripts that make URLs and ID codes for the old CogPrints carry on working. The
automatic installer should be fine for upgrades. Make sure you enter a prefix:

/mnt/disk0/cogprints

rather than /opt/eprints.

Admin mail goes to admin@cogprints.soton.ac.uk, readable by running "pine" in
the admin user account on the cogprints machine (which is known internally in
ECS as corpus.ecs.soton.ac.uk.)

The extra CogPrints files are:

old-ids.map          - contains the new IDs corresponding to old cogprints IDs
cgi/cog_abs          - aliased to /abs/ so for old URLs to work.
cgi/cog_archives     - aliased to /archives/ so for old URLs to work.
cgi/cog_search       - aliased to /search/ so links to the old search page work
cgi/cog_view_eprints - alias to /view_eprint/ for old URLs to work.
site_lib/CogOld.pm   - has methods for the cog_* scripts (reads old-ids.map)

Obviously all the text in static/ is different too, and there are a few
differences in cfg/.

Everything is stored on CogPrints as RPMs, and so should be straightforward to
maintain/upgrade. The Apache server and the eprints stuff all runs as the
eprints user. Access to the CogPrints machine is restricted to ssh, since it is
a production service that could be open to attack.

The whole filesystem (incl. database, which is stored as files) is backed up
regularly by the ECS backup system.




Open Issues/Possible future developments
========================================

User record: privacy option?
Automatic processing of failed mails (auto detect defunct email addresses)
Certified users, with priviledges to give new versions of other people's
eprints?
Request removal emails: -> set reply to: field to user
Third access level - moderator/reviewer?
Comments/annotations that aren't full eprints (effectively just more metadata)
Array of array of tags for the depositing process, e.g.
my @deposit_sequence =
(
	[ "title", "author", "eprinttype" ],
	[ "subjects", "keywords", ]
);
Better labelled back button?
Disambiguate finished buttons?
"Attempt to free unreferenced scalar during global destruction." ???
standard protocol for bulk uploading??
Compression - automatic detection and compressing/decompressing of gzipped
files coming in
INTERNATIONALISATION: The way this should work is to have a "catalogue" of all
phrases used in the code. Then wherever English is printed or returned from a
function, instead of adding just the English, look up in the catalogue the
correct version for the current locale. (Locale-PGetText CPAN module?)
Add "view workspaces" type option for staff members?
better error message in error_log if nothing in eprints/html/documents (i.e. no
"disk0")


ENJOY! And the best of British.

Rob.
