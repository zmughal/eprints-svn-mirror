######################################################################
#
# Select items for RAE return (possibly on behalf of someone else)
#
######################################################################
#
#  __LICENSE__
#
######################################################################

use EPrints::EPrint;
use EPrints::Session;
use EPrints::User;
use strict;

# Enclosing the main part in {..} prevents accidental
# (and *dangerous*) use of 'global' vars inside subroutines
{

# Create session
my $session = new EPrints::Session;
exit( 0 ) unless( defined $session );
my $archive = $session->get_archive;

# Check user has appropriate privs
if( !$session->auth_check( "deposit" ) )
{
    $session->terminate;
    Apache::exit( 0 );
}
my $user = $session->current_user;

# Init RAE config/phrases
use RAELoader;
RAELoader::init_rae( $session );

# Check selected role
my $role = $user;
if( defined( $session->param( "role" ) ) )
{
	my $selected_role = EPrints::User->new( $session, $session->param( "role" ) );
	my $check = $archive->get_conf( "rae", "can_user_assume_role" );
	if( &$check( $session, $user, $selected_role ) ) {
		$role = $selected_role;	
	}
	# Remove role parameter so that we
	# can detect "internal" button presses
	$session->{query}->delete( "role" );
}



my $eprintid = $session->param("eprintid");
if(!defined $eprintid)
{
	# looks like the script was called outside raeselect, so let's redirect as we can't do anything without the eprintid
	
	$session->redirect("./raeselect");
}

my $eprint = EPrints::EPrint->new( $session, $eprintid );

if(!defined $eprint)
{
	# could redirect as well to raeselect...
	
	#dopage_problems -> cf error above
	$session->terminate;
	exit( 0 );
}



# Switch on user input
# NB: based on process_webpage() in EPrints/SearchExpression.pm
my $action_button = $session->get_action_button();


if( defined $action_button && $action_button eq "submit" )
{
	
#	my @flags = @{ $archive->get_conf( "rae", "edit_flags" ) };
#	my @textboxes = @{ $archive->get_conf( "rae", "edit_textboxes" ) };
#	my @ratings = @{ $archive->get_conf( "rae", "edit_ratings" ) };
	
	my $is_first = 1;
	my $sql = "UPDATE rae_selected SET ";
	my @options = _get_all_options( $session );
	
	foreach(@options)
	{
		my $value = $session->param($_);
		
		# need quotes otherwise SQL freaks the content of the textbox
		my $qvalue = $session->get_db->{dbh}->quote( $value );
		if($is_first)
		{
			$sql = $sql."$_=$qvalue";
			$is_first = 0;
		}
		else
		{
			$sql = $sql.", $_=$qvalue";
		}
			
	}
		
	$sql = $sql." WHERE eprintid=$eprintid AND userid=".$role->get_id; 
	
	
	if( !$session->get_db->do( $sql ) )
	{
			# TODO: better error handling?
			#$session->render_error( "Error: $sql", $archive->get_conf( "perl_url" ) . "/users/rae/raeselect" );
	}	

}


# Build + Send Page

my $select_url = $archive->get_conf("perl_url") . "/users/rae/raeselect";
$select_url .= "?role=" . $role->get_id if $user->get_id != $role->get_id;

my $title = $session->html_phrase( "rae/edit:page_title", user => $role->render_description );
my $page = $session->html_phrase( "rae/edit:page",
	select_link => $session->render_link( $select_url ),
	citation => $eprint->render_citation_link(),
	options => dopage_options( $session, $eprintid, $role ),
);


$session->build_page( $title, $page );
$session->send_page();
$session->terminate();
exit;

}





sub dopage_options
{
	my ( $session, $eprintid, $role ) = @_;
	
	
	my %values;
	my @options = _get_all_options( $session );
	
	# building the SQL select statement:
	my $i = 0;
	my $sql = "SELECT ";
	foreach(@options)
	{
		$sql = $sql.", " if($i++);
		$sql = $sql.$_;
	}
	
	
	$sql = $sql." FROM rae_selected WHERE eprintid=$eprintid AND userid=".$role->get_id;

	my $sth = $session->get_db->prepare( $sql );
	if( $session->get_db->execute( $sth, $sql ) )
	{
		$i = 0;
		while( my @row = $sth->fetchrow )
		{
			foreach(@options)
			{
				# save the SQL data into the %values hash (row[i] contains the (i+1)th element in the same order as precised in the SQL statement)
				$values{$_} = $row[$i++];
			}
			
		}
	}

	# let's trust this function for rendering...
	return _render_option_form( $session, $eprintid, \%values, $role );

}


# render pretty much all the page! the only thing it doesn't do is the SQL (or coffee)
#
# it firstly renders the 'flags' then the textboxes and finally the ratings...
sub _render_option_form
{
	my ($session, $eprintid, $options, $role) = @_;

	my $form = $session->render_form( "post" );
	$form->appendChild($session->render_hidden_field("eprintid", $eprintid));
	$form->appendChild($session->render_hidden_field("role", $role->get_id));

	my $archive = $session->get_archive();
	my @flags = @{ $archive->get_conf( "rae", "edit_flags" ) };
	my @textboxes = @{ $archive->get_conf( "rae", "edit_textboxes" ) };
	my @ratings = @{ $archive->get_conf( "rae", "edit_ratings" ) };

	# first build the table containing the 'flags' (on/off options, represented by checkboxes)
	if(scalar @flags > 0)
	{
		my $table = $session->make_element("table", class=>"bordered");
		$form->appendChild($table);
		
		my ($td,$tr,$flag);

		foreach my $flag (@flags)
		{
			$tr = $session->make_element("tr");
			$table->appendChild($tr);

			$td = $session->make_element("td", class=>"tickcol");
			$tr->appendChild($td);
			$td->appendChild(_render_flag($session,$flag,"TRUE","",$$options{$flag}));
			
			$td = $session->make_element("td", class=>"citationcol");
			$tr->appendChild($td);
			$td->appendChild( $session->html_phrase("rae/edit:option_desc_$flag") );
			$td->appendChild($session->make_element("br"));
			$td->appendChild( $session->html_phrase("rae/edit:option_help_$flag") );			
		}
		
	}
	
	$form->appendChild($session->make_element("br"));
	
	# displays the textbox(es) such as Further Details in Soton
	foreach my $tb (@textboxes)
	{
		$form->appendChild(_render_textbox($session, $tb, $$options{$tb}));
		$form->appendChild($session->make_element("br"));
	}
	
	if(scalar(@ratings) > 0)
	{
		my $h2 = $session->make_element( "h2" );
		$h2->appendChild($session->html_phrase("rae/edit:outputratings"));
		$form->appendChild($h2);
		
		my @values = (0..4);
		my %labels = (0, "0", 1, "1", 2, "2", 3, "3", 4, "4");

		my ($table, $tr, $td);

		$table = $session->make_element("table");
		$form->appendChild($table);
	
		my $eprint = EPrints::EPrint->new( $session, $eprintid );
		my $user = $session->current_user;
		
		foreach my $rating (@ratings)
		{
			next if($rating eq 'ratings_ext' || $rating eq 'ratings_int');	# need to hide those for the moment				
			$tr = $session->make_element("tr");
			$table->appendChild($tr);
			$td = $session->make_element("td");
			$tr->appendChild($td);
			
			$td->appendChild($session->html_phrase("rae/edit:option_desc_$rating"));
			my $list = $session->render_option_list(
				name => $rating,
				height => 1,
				values => \@values,
				labels => \%labels,
				default => $$options{$rating},	# if defined!
			);
	
# keep that check for later...
#
#			if(!$user->is_owner( $eprint ))
#			{
#				$list->setAttribute("disabled", "disabled");
#			}
	
			$td = $session->make_element("td");
			$tr->appendChild($td);
			$td->appendChild($list);			
			
		}
	
	}
	
	
	$form->appendChild($session->make_element("br"));
	$form->appendChild($session->render_action_buttons(submit=>"Save Changes" ));
	
	return $form;
}










sub _render_textbox
{
	my ($session, $name, $value) = @_;
	
	my $div = $session->make_element("div");
	my $h2 = $session->make_element("h2");
	
	$h2->appendChild($session->html_phrase("rae/edit:option_desc_$name"));
	$div->appendChild($h2);
	my $em = $session->make_element( "em" );
	$em->appendChild($session->html_phrase("rae/edit:option_help_$name"));

	$div->appendChild($em);
	$div->appendChild($session->make_element("br"));
	$div->appendChild($session->make_element("br"));
	
	my $textbox = $session->make_element("textarea", name=>$name);
	
	$textbox->setAttribute("rows","10");
	$textbox->setAttribute("cols","100");
	if(defined $value)
	{
		$textbox->appendChild($session->make_text($value));
	}
	
	$div->appendChild($textbox);
	return $div;

}






sub _render_flag
{
	my ($session, $name, $value, $desc, $checked) = @_;
	
	my $checkbox = $session->make_element("input", type=>"checkbox");
	
	$checkbox->setAttribute("name",$name);
	$checkbox->setAttribute("value",$value);
	$checkbox->appendChild($session->make_text( $desc ));
	
	if($checked eq 'TRUE')
	{
		$checkbox->setAttribute("checked","checked");
	}
	
	return $checkbox;
	
}



# unused
sub _render_rating
{
	my ($session) = @_;
	
	
}


sub _get_all_options
{
	my ($session) = @_;
	
	my $archive = $session->get_archive;
	
	return ( @{ $archive->get_conf( "rae", "edit_flags" ) }, @{ $archive->get_conf( "rae", "edit_textboxes" ) }, 
	@{ $archive->get_conf( "rae", "edit_ratings" ) } );
}




