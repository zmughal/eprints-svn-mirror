######################################################################
#
# Declare measures of esteem (possibly on behalf of someone else)
#
######################################################################
#
# This file is part of the EPrints RAE module developed by the 
# Institutional Repositories and Research Assessment (IRRA) project,
# funded by JISC within the Digital Repositories programme.
#
# http://irra.eprints.org/
#
# The EPrints RAE module is free software; you can redistributet 
# and/or modify it under the terms of the GNU General Public License 
# as published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.

# The EPrints RAE module is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
######################################################################

use EPrints::MetaField;
use EPrints::Session;
use EPrints::User;
use strict;

# Create session
my $session = new EPrints::Session;
exit( 0 ) unless( defined $session );
my $archive = $session->get_archive;

# Check user has appropriate privs
if( !$session->auth_check( "deposit" ) )
{
	$session->terminate;
	Apache::exit( 0 );
}
my $user = $session->current_user;

# Init RAE config/phrases
use RAELoader;
RAELoader::init_rae( $session );

# Check selected role
my $role = $user;
if( defined( $session->param( "role" ) ) )
{
	my $selected_role = EPrints::User->new( $session, $session->param( "role" ) );
	my $check = $archive->get_conf( "rae", "can_user_assume_role" );
	if( &$check( $session, $user, $selected_role ) ) {
		$role = $selected_role;	
	}
}

# Show available roles
my $roles_frag = $session->make_doc_fragment;
my $get_roles = $archive->get_conf( "rae", "roles_for_user" );
my @roles = &$get_roles( $session, $user );
if( scalar @roles )
{
	my $form = $session->render_form;
	$form->appendChild( $session->render_option_list(name => 'role', pairs => \@roles) );
	$form->appendChild( $session->render_action_buttons(submit => $session->phrase( "rae:change_role" ) ) );
	
	$roles_frag = $session->html_phrase( "rae:roles", 
		change_role => $form,
		current_user => $user->render_description,
	);
}

# Get measures of esteem from DB
my %moe;
my $sql = "SELECT field, value FROM rae_data WHERE userid=" . $role->get_id;
my $sth = $session->get_db->prepare( $sql );
if( $session->get_db->execute( $sth, $sql ) )
{
	while( my @row = $sth->fetchrow )
	{
		$moe{$row[0]} = $row[1];
	}
}

my @metafields;
my $shortcuts_frag = $session->make_element( "ul" );
foreach my $field ( @{ $archive->get_conf( "rae", "moe_fields" ) } )
{

	# Create metafield	
	my $metafield = EPrints::MetaField->new(
		# TODO: more flexible field definition in config
		type => "longtext",
		archive => $session->get_archive(),
		confid => "rae",
		name => $field,
	);

	# Check for input value	
	my $val = $session->param( $field );
	if( defined $val )
	{
		my $qfield = $session->get_db->{dbh}->quote( $field );
		my $qval = $session->get_db->{dbh}->quote( $val );
				
		my $sql;
		if( defined $moe{$field} )
		{
			# Has the value changed?
			if( $moe{ $field } ne $val )
			{
				$sql = "UPDATE rae_data SET value=$qval, chooserid=" . $user->get_id . " WHERE field=$qfield AND userid=" . $role->get_id;
			}
			
		}
		elsif( $val ne "" ) 
		{
			$sql = "INSERT INTO rae_data VALUES (" . $role->get_id . ", $qfield, $qval," . $user->get_id . ");";
		}

		# Update DB
		if( defined $sql )
		{
			if ( !$session->get_db->do( $sql ) )
			{
				# TODO: error handling?
				#$session->render_error("Error: $sql", $archive->get_conf( "perl_url" ) . "/users/rae/raeselect" );
			}
			else
			{
				$moe{ $field } = $val;
			}
		}
	} 
	push @metafields, $metafield;

	# Create shortcut
	my $li = $session->make_element( "li" );
	$shortcuts_frag->appendChild( $li );
	my $link = $session->render_link( "#" . $field );
	$link->appendChild( $session->make_text( EPrints::Utils::tree_to_utf8( $metafield->render_name( $session ) ) ) );
	$li->appendChild( $link );
}


# Render input form
my $form_frag = $session->render_form( "post" );
$form_frag = $session->render_input_form(
	fields => \@metafields,
	values => \%moe,
	show_names => 1,
	show_help => 1,
	buttons => { submit => $session->phrase( "rae/data:submit_button" ) },
);
$form_frag->appendChild( $session->render_hidden_field( "role", $role->get_id ) );

# Build & Send page
my $select_url = $archive->get_conf("perl_url") . "/users/rae/raeselect";
$select_url .= "?role=" . $role->get_id if $user->get_id != $role->get_id;
my $title = $session->html_phrase( "rae/data:page_title", user => $role->render_description );
my $page = $session->html_phrase( "rae/data:page",
	shortcuts => $shortcuts_frag,
	form => $form_frag,
	roles => $roles_frag,
	select_link => $session->render_link( $select_url ),
);

$session->build_page( $title, $page );
$session->send_page();
$session->terminate();
exit;
