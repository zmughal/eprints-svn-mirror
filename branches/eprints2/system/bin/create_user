#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<create_user> - add a new user in an EPrint repository

=head1 SYNOPSIS

B<create_user> I<repository_id> [B<options>] I<username> I<email> I<usertype> [I<password>]

=head1 DESCRIPTION

Create a new user in an eprint repository. 

This is handy for making the initial admin user at the very least.

=head1 ARGUMENTS

=over 8

=item I<repository_id> 

The ID of the EPrint repository to add a user to.

=item I<username> 

The requested username for the new user. If a user with this name already exists then the script will abort with a error.

=item I<email> 

The email address of the new user.

=item I<usertype> 

The type of the new user. The type of a user sets how much they can do in the system. The default EPrints configuration provides 3 types of users:

=over 8

=item I<user>

Normal everyday joe public users.

=item I<editor>

Editors may approve eprints for addition, browse the submission buffer, and check the repository status.

=item I<admin>

Administrators may do everything. That's probably what for yourself if you are the person setting up the repository.

=back

=item I<password>

The initial password for this user. You don't have to specify it here if you don't want to. It will be
encrypted, by EPrints, using UNIX crypt. This should not be a problem unless you are using a different
method to authenticate users.

=item I<repository_id> 

The ID of the EPrint repository to add a user to.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

__GENERICPOD__

=cut

#cjg Does not use noise levels

use EPrints;

use strict;
use Getopt::Long;
use Pod::Usage;

my $verbose = 0;
my $version = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "create_user" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 4 && scalar @ARGV != 5 ); 

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = EPrints::Session->new( 1 , $ARGV[0], $noise );
exit unless( defined $session );

my $user_ds = $session->get_repository->get_dataset( "user" );

my $valid_access_level = 0;
my $type;
foreach $type (@{ $user_ds->get_types() })
{
	$valid_access_level = 1 if( $ARGV[3] eq $type );
}

if( defined EPrints::DataObj::User::user_with_username( $session, $ARGV[1] ) )
{
	print STDERR "User with username '$ARGV[1]' already exists.\n";
}
elsif( $valid_access_level )
{
	my $new_user = $user_ds->create_object( $session, { usertype=> $ARGV[3] } );

	$new_user->set_value( "username" , $ARGV[1] );
	$new_user->set_value( "email" , $ARGV[2] );
	if( $#ARGV == 4 )
	{
		$new_user->set_value( "password" , EPrints::Utils::crypt_password( $ARGV[4], $session ) );
		$new_user->commit;
	}

	if( defined $new_user )
	{
		if( $noise >= 1 )
		{
			print "Successfully created new user:\n";
			print "       ID: ".$new_user->get_value( "userid" )."\n";
		}
		if( $noise >= 2 )
		{
			print " Username: ".$new_user->get_value( "username" )."\n";
			print "     Type: ".$new_user->get_value( "usertype" )."\n";
		}
	}
	else
	{
		my $db_error = $session->get_database->error;
		print STDERR "Error creating user: $db_error\n";
	}
}
else
{
	print STDERR "Invalid access level. Valid access levels are:\n";
	foreach (@{ $user_ds->get_types() })
	{
		print "  $_\n";
	}
}

$session->terminate();
