#!/usr/bin/perl -w -I/opt/ep2stable/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<export> - export all items in a dataset using an output plugin.

=head1 SYNOPSIS

B<export> I<archiveid> [B<options>] I<dataset> [I<plugin>]

=head1 DESCRIPTION

This command outputs a dataset in the selected format. The formats available depend on what Output plugins have been installed.

=head1 ARGUMENTS

=over 8

=item I<archiveid> 

The ID of the EPrint archive to use.

=item I<dataset>

The name of the dataset to export, such as "archive", "subject" or "user".

=item I<plugin>

The id of the output plugin to use. This should not include the leading "output/". Examples: bibtex, xml.

If this is ommited or an invalid plugin is requested, then 'export' will list all plugins compatible with the dataset and exit.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   


__GENERICPOD__

=cut


use Getopt::Long;
use Pod::Usage;
use strict;

use EPrints::Session;
use EPrints::XML;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $purge = 1;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "export_xml" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 2 && scalar @ARGV != 3 );

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = new EPrints::Session( 1, $ARGV[0], $noise );
exit( 1 ) unless defined $session;

my $ds = $session->get_archive()->get_dataset( $ARGV[1] ) ;
if( !defined $ds )
{
	print STDERR "Unknown Dataset ID: $ARGV[1]\n";
	$session->terminate;
	exit 1;
}

my $plugin;
if( defined $ARGV[2] )
{
	$plugin = $session->plugin( "output/".$ARGV[2] );
}
if( !defined $plugin )
{
	my @plugins = $session->plugin_list( 
					type=>"output",
					can_accept=>"list/".$ds->confid );
	print "Available output formats:\n";
	foreach my $plugin_id ( @plugins ) 
	{
		$plugin = $session->plugin( $plugin_id );
		my( $type, $subtype ) = split "/", $plugin_id;
		print $subtype.": ".$plugin->get_name()."\n";
	}
	$session->terminate();
	exit;
}


my $req_plugin_type = "list/".$ds->confid;

unless( $plugin->can_accept( $req_plugin_type ) )
{
	print STDERR "Plugin ouput/".$ARGV[2]." can't process $req_plugin_type data.\n";
	$session->terminate();
	exit 1;
}
	
my $search = EPrints::SearchExpression->new(
	allow_blank => 1,
	dataset => $ds,
	session => $session );
my $results = $search->perform_search;
$plugin->output_list( list=>$results, fh=>*STDOUT );
$results->dispose();



$session->terminate();
exit;
