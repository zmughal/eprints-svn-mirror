AC_INIT()

VERSION=1.0

DIST_PATH=`pwd`
INSTALL_USER=eprints
INSTALL_GROUP=eprints
VIRTUALHOST=

PERL_SEARCH_PATH="$PATH:/usr/local/bin:/opt/perl/bin:/opt/PERL/bin"
AC_ARG_WITH(perl,
    [  --with-perl=[PATH]        path of perl interpreter ],
    [
        AC_MSG_CHECKING([perl interpreter])
        PERL_PATH=$withval
        if test -x $PERL_PATH ; then
            AC_MSG_RESULT($PERL_PATH)
        else
            AC_MSG_ERROR(Perl interpreter specified does not appear to exist)
        fi
    ],
    [
        AC_PATH_PROG(PERL_PATH, perl, "NOTFOUND", $PERL_SEARCH_PATH)
        if test $PERL_PATH = NOTFOUND ; then
            AC_MSG_ERROR(Unable to find perl interpreter)
        fi
    ]
)

AC_MSG_CHECKING([whether the perl interpreter ($PERL_PATH ) runs])
if $PERL_PATH -e "" > /dev/null 2>&1 ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(Perl interpreter does not appear to run)
fi

AC_MSG_CHECKING([whether the perl interpreter ($PERL_PATH ) works])
if $PERL_PATH -e " print(\"INSERT PERL TEST HERE\")" > /dev/null 2>&1 ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(Perl interpreter does not appear to work)
fi

AC_ARG_WITH(user,
    [  --with-user=[USER]        install eprints to run as USER ],
    [
        INSTALL_USER=$withval
    ])
AC_MSG_CHECKING([whether the user $INSTALL_USER exists])
if $PERL_PATH -e "getpwnam(\"$INSTALL_USER\")?exit 0:exit 1;" > /dev/null 2>&1 ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)	
    AC_MSG_ERROR(User $INSTALL_USER does not appear to exist)
fi

AC_ARG_WITH(group,
    [  --with-group=[GROUP]      install eprints to run as GROUP ],
    [
        INSTALL_GROUP=$withval
    ])
AC_MSG_CHECKING([whether the group $INSTALL_GROUP exists])
if $PERL_PATH -e "getgrnam(\"$INSTALL_GROUP\")?exit 0:exit 1;" > /dev/null 2>&1 ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)	
    AC_MSG_ERROR(Group $INSTALL_GROUP does not appear to exist)
fi

AC_ARG_WITH(virtualhost,
    [  --with-virtualhost=[VIRTUALHOST]    
                          use VIRTUALHOST rather than "*" for
                          Apache VirtualHost directives. ],
    [
        VIRTUALHOST=$withval
    ])

DISABLE_DF="0"
AC_ARG_ENABLE(diskfree,
    [  --disable-diskfree      disable disk free space calls],
    [
        if test $enableval = no ; then
            DISABLE_DF="1"
        fi
    ])

DISABLE_GDOME="0"
AC_ARG_ENABLE(gdome,
    [  --disable-gdome         don't try to use the XML::GDOME module],
    [
        if test $enableval = no ; then
            DISABLE_GDOME="1"
        fi
    ])

APACHE=""
AC_ARG_WITH(apache,
    [  --with-apache=[VERSION]   version of apache to work with: 1 or 2],
    [
        APACHE=$withval
    ])

SMTP=""
AC_ARG_WITH(smtp-server,
    [  --with-smtp-server=[HOSTNAME]  
                          SMTP server to use for outgoing email],
    [
        SMTP_SERVER=$withval
    ])

if test $DISABLE_DF = "0" ; then
    AC_MSG_CHECKING([what perl function to use for disk free])
    DF_FUNC=`$PERL_PATH df-check.pl`
    AC_MSG_RESULT($DF_FUNC)
    if test $DF_FUNC = "none" ; then
        AC_PATH_PROG(H2PH_PATH, h2ph, "NOTFOUND", $PERL_SEARCH_PATH)
        if test $H2PH_PATH = "NOTFOUND" ; then
            H2PH_PATH=h2ph
        fi
        echo "**************************************************************"
        echo "*** Unable to find a way to check for free disk space in perl."
        echo "*** Free space checking function disabled. To supress this"
        echo "*** message, re-run configure with the --disable-diskfree"
        echo "*** option."
        echo "*** "
        echo "*** EPrints uses diskfree to warn you if you are running"
        echo "*** low on disk space. If you disable the feature you will"
        echo "*** need to keep an eye on free disk space yourself."
        echo "*** "
        echo "*** If you require free space checking, the necessary"
        echo "*** functionality can be enabled by running the perl"
        echo "*** tool \"h2ph\" in /usr/include, as root:"
        echo "***     cd /usr/include"
        echo "***     $H2PH_PATH * */*"
        echo "**************************************************************"
    fi
fi

dnl This is the path that we search for tools

TOOL_PATH="$PATH:/usr/local/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/lib"
AC_ARG_WITH(toolpath,
    [  --with-toolpath=[PATH]    search path for tool programs ],
    [
        TOOL_PATH=$withval
    ])

AC_PATH_PROG(UNZIP_PATH, unzip, "NOTFOUND", $TOOL_PATH)
if test $UNZIP_PATH = "NOTFOUND"; then
    echo "**************************************************************"
    echo "*** Unable to find 'unzip'"
    echo "*** "
    echo "*** This is not critical. Without unzip, EPrints will not be"
    echo "*** able to extract documents uploaded as ZIP archives."
    echo "*** "
    echo "*** Try running this script again giving the --with-toolpath"
    echo "*** option to give a colon separated path"
    echo "*** where the tools can be found"
    echo "**************************************************************"
    AC_MSG_WARN([Unable to find unzip])
fi

AC_PATH_PROG(TAR_PATH, tar, "NOTFOUND", $TOOL_PATH)
if test $TAR_PATH = "NOTFOUND"; then
    echo "**************************************************************"
    echo "*** Unable to find 'tar'"
    echo "*** "
    echo "*** This is not critical. Without tar, EPrints will not be"
    echo "*** able to extract documents uploaded as tar.gz archives."
    echo "*** "
    echo "*** Try running this script again giving the --with-toolpath"
    echo "*** option to give a colon separated path"
    echo "*** where the tools can be found"
    echo "**************************************************************"
    AC_MSG_WARN([Unable to find tar])
fi

AC_PATH_PROG(GUNZIP_PATH, gunzip, "NOTFOUND", $TOOL_PATH)
if test $GUNZIP_PATH = "NOTFOUND"; then
    echo "**************************************************************"
    echo "*** Unable to find 'gunzip'"
    echo "*** "
    echo "*** This is not critical. Without gunzip, EPrints will not be"
    echo "*** able to extract documents uploaded as tar.gz archives."
    echo "*** "
    echo "*** Try running this script again giving the --with-toolpath"
    echo "*** option to give a colon separated path"
    echo "*** where the tools can be found"
    echo "**************************************************************"
    AC_MSG_WARN([Unable to find gunzip, the GNU unzip tool])
fi

AC_PATH_PROG(WGET_PATH, wget, "NOTFOUND", $TOOL_PATH)
if test $WGET_PATH = "NOTFOUND"; then
    echo "**************************************************************"
    echo "*** Unable to find 'wget'"
    echo "*** "
    echo "*** This is not critical. Without wget, EPrints will not be"
    echo "*** able to capture documents from URLs."
    echo "*** "
    echo "*** Try running this script again giving the --with-toolpath"
    echo "*** option to give a colon separated path"
    echo "*** where the tools can be found"
    echo "**************************************************************"
    AC_MSG_WARN([Unable to find wget])
fi

AC_PATH_PROG(SENDMAIL_PATH, sendmail, "NOTFOUND", $TOOL_PATH)
if test $SENDMAIL_PATH = "NOTFOUND"; then
    echo "*** 'sendmail' is only needed if you choose not to use"
    echo "*** Net::SMTP to send email."
#    AC_MSG_WARN([Unable to find sendmail])
fi



# tools used to create latex equations. not critical.

AC_PATH_PROG(LATEX_PATH, latex, "NOTFOUND", $TOOL_PATH)
if test $LATEX_PATH = "NOTFOUND"; then
    echo "*** 'latex' is only needed if you want to use the feature"
    echo "*** which displays latex equations as inline graphics."
#    AC_MSG_WARN([Unable to find latex])
fi

AC_PATH_PROG(DVIPS_PATH, dvips, "NOTFOUND", $TOOL_PATH)
if test $DVIPS_PATH = "NOTFOUND"; then
    echo "*** 'dvips' is only needed if you want to use the feature"
    echo "*** which displays latex equations as inline graphics."
#    AC_MSG_WARN([Unable to find dvips, for latex])
fi

AC_PATH_PROG(CONVERT_PATH, convert, "NOTFOUND", $TOOL_PATH)
if test $CONVERT_PATH = "NOTFOUND"; then
    echo "*** 'convert' is only needed if you want to use the feature"
    echo "*** which creates thumbnails and previews of images and PDFs"
    echo "*** and/or displays latex equations as inline graphics."
#    AC_MSG_WARN([Unable to find convert, the ImageMagick tool])
fi



TEST_PERL_MOD(HAS_MOD_PERL_1,Apache)
TEST_PERL_MOD(HAS_MOD_PERL_2A,Apache2)
TEST_PERL_MOD(HAS_MOD_PERL_2B,Apache2::Util)
HAS_MOD_PERL_2="0"
if test $HAS_MOD_PERL_2A = "1"; then
	HAS_MOD_PERL_2="1";
fi
if test $HAS_MOD_PERL_2B = "1"; then
	HAS_MOD_PERL_2="1"
fi
	

NEED_TO_CHECK_CGI="no"
if test "x$APACHE" = "x1" ; then
	if test $HAS_MOD_PERL_1 = "1"; then
		CHECK_PERL_MOD(Apache::Constants)
		CHECK_PERL_MOD(Apache::Registry)
	else
		echo "***********************************************************"
		echo "*** Failed to find mod_perl 1 (PERL Module 'Apache')"
		if test $HAS_MOD_PERL_2 = "1"; then
			echo "***"
			echo "*** However the module Apache2 is installed!"
			echo "*** That sounds like you've got the wrong setting"
			echo "*** for --with-apache=x"
		fi
		echo "***********************************************************"
	fi
else
	if test $HAS_MOD_PERL_2 = "1"; then
		if test $HAS_MOD_PERL_2A = "1"; then
			CHECK_PERL_MOD(Apache::Const)
			NEED_TO_CHECK_CGI="old"
		else
			CHECK_PERL_MOD(Apache2::Const)
			NEED_TO_CHECK_CGI="new"
		fi
		CHECK_PERL_MOD(ModPerl::Registry)
	else
		echo "***********************************************************"
		echo "*** Failed to find mod_perl 2 (PERL Module 'Apache2')"
		if test $HAS_MOD_PERL_1 = "1"; then
			echo "***"
			echo "*** However the module Apache is installed!"
			echo "*** That sounds like you've got the wrong setting"
			echo "*** for --with-apache=x"
		fi
		echo "***********************************************************"
	fi
fi



if test "$NEED_TO_CHECK_CGI" = "new" ; then
    AC_MSG_CHECKING([CGI.pm/mod_perl compatiability (need newer CGI.pm)])
    CGI_FUNC=`$PERL_PATH cgi-check.pl`
    AC_MSG_RESULT($CGI_FUNC)
    if test $CGI_FUNC != "new" ; then
	echo "***********************************************************"
	echo "*** The version of CGI.pm you are using is not compatible"
	echo "*** with the version of mod_perl you are using. Either"
	echo "*** downgrade mod_perl to version <=1.99.21 or upgrade"
	echo "*** CGI.pm to version >= 3.08. The mod_perl documentation"
	echo "*** recommends a CGI.pm version >= 3.11"
	echo "*** See also: http://perl.apache.org/docs/2.0/rename.html"
	echo "***********************************************************"
    fi
fi
	
if test "$NEED_TO_CHECK_CGI" = "old" ; then
    AC_MSG_CHECKING([CGI.pm/mod_perl compatiability (need older CGI.pm)])
    CGI_FUNC=`$PERL_PATH cgi-check.pl`
    AC_MSG_RESULT($CGI_FUNC)
    if test $CGI_FUNC != "old" ; then
	echo "***********************************************************"
	echo "*** The version of CGI.pm you are using is not compatible"
	echo "*** with the version of mod_perl you are using. Either"
	echo "*** upgrade mod_perl to version >=1.99.22 or downgrade"
	echo "*** CGI.pm to version <= 3.07"
	echo "*** See also: http://perl.apache.org/docs/2.0/rename.html"
	echo "***********************************************************"
    fi
fi
	
        

CHECK_PERL_MOD(Carp)
CHECK_PERL_MOD(Config)
CHECK_PERL_MOD(Cwd)
CHECK_PERL_MOD(Data::Dumper)
CHECK_PERL_MOD(Exporter)
CHECK_PERL_MOD(File::Basename)
CHECK_PERL_MOD(File::Copy)
CHECK_PERL_MOD(File::Find)
CHECK_PERL_MOD(File::Path)
CHECK_PERL_MOD(Getopt::Long)
CHECK_PERL_MOD(MIME::Base64)
CHECK_PERL_MOD(DBD::mysql)
CHECK_PERL_MOD(Pod::Usage)
#CHECK_PERL_MOD(Proc::Reliable)
CHECK_PERL_MOD(Sys::Hostname)
CHECK_PERL_MOD(Unicode::String)
CHECK_PERL_MOD(XML::Parser)




ENABLE_GDOME="0"
if test $DISABLE_GDOME = "0"; then
   TEST_PERL_MOD(GDOME_AVAILABLE, XML::GDOME)
   if test $GDOME_AVAILABLE = "1"; then
       echo "Found XML::GDOME module. Lovely. We'll use that then!"
       ENABLE_GDOME="1"
   else
       echo "Didn't find XML::GDOME module. We'll make do with XML::DOM then."
       ENABLE_GDOME="0"
   fi
fi

AC_PREFIX_DEFAULT(/opt/eprints3)

PREFIX=$prefix
if test $PREFIX = "NONE" ; then
    PREFIX=/opt/eprints3
fi

PLATFORM="unix";

AC_SUBST(PERL_PATH)
AC_SUBST(DIST_PATH)
AC_SUBST(PREFIX)
AC_SUBST(DISABLE_DF)
AC_SUBST(ENABLE_GDOME)
AC_SUBST(APACHE)
AC_SUBST(INSTALL_USER)
AC_SUBST(INSTALL_GROUP)
AC_SUBST(VIRTUALHOST)
AC_SUBST(SMTP_SERVER)
AC_SUBST(PLATFORM)

AC_OUTPUT([
        install.pl
])

chmod +x install.pl
echo "Now run ./install.pl to install/upgrade to $PREFIX"
