#!/usr/bin/perl -w -I/opt/ep2stable/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<import> - rebuild an EPrint archive dataset from the contents of a file

=head1 SYNOPSIS

B<import> [B<options>] I<archiveid> I<dataset> I<file>

=head1 DESCRIPTION

This script is the corrolary of I<export_xml>, as it will import xml in EPrints xml format into a dataset (by default replacing any existing data).

Without the B<--force> option, this script asks for confirmation before actually erasing anything.

This script shouldn't be used lightly, as some datasets may react badly to it.

=head1 ARGUMENTS

=over 8

=item I<archiveid> 

The ID of the EPrint archive to use.

=item I<dataset>

The dataset to import into.

=item I<file>

The file to import from.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=item B<--nopurge>

Do not purge the existing dataset.

=item B<--schema>

The format I<file> is in (defaults to "xml" - EPrints internal xml format).

=item B<--force>

Don't ask before making the changes.

=back   

=head1 FILE FORMAT

See L<EPrints::ImportXML> for information on the EPrints xml schema.

__GENERICPOD__

=cut



use Getopt::Long;
use Pod::Usage;
use strict;

use EPrints::Session;
use EPrints::ImportXML;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $force = 0;
my $purge = 1;
my $help = 0;
my $man = 0;
my $format = 'xml';

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'force' => \$force , 
	'verbose+' => \$verbose,
	'version' => \$version,
	'silent' => \$quiet,
	'quiet' => \$quiet,
	'purge!' => \$purge,
	'schema=s' => \$format
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "import" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 3 ); 

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my( $archiveid, $datasetid, $filename ) = @ARGV;

unless( $format eq 'xml' )
{
	pod2usage( -message => "$0: schema [$format] isn't supported\n" );
}

my $session = new EPrints::Session( 1, $archiveid, $noise );
exit( 1 ) unless defined $session;
my $ds = $session->get_archive()->get_dataset( $datasetid );
unless( $ds ) {
	pod2usage( "$0: No such dataset [$datasetid]\n" );
}

if( $ds->confid eq 'eprint' )
{
	pod2usage( "$0: Use import_eprints to import eprints\n" );
}
if( $ds->confid eq 'subjects' )
{
	pod2usage( "$0: Use import_subjects to import subjects\n" );
}

unless( -e $filename )
{
	pod2usage( "$0: No such file [$filename]\n" );
}

unless( $force )
{
	if( $noise > 0 )
	{
		printf( "You are about to make bulk changes to the %s dataset\n", $ds->confid );
	}
	print "Continue (yes/no): ";
	my $input = <STDIN>;
	chomp( $input );
	unless( lc($input) eq "yes" )
	{
		print "Aborting then.\n\n";
		$session->terminate();
		exit;
	}
}

my $ds_obj = $ds->make_object( $session, {} );

if( $purge )
{
	if( $noise > 0 )
	{
		print "Purging current dataset ...\n";
	}
	$ds_obj->remove_all( $session );
	if( $noise > 0 )
	{
		print "...done purging.\n";
	}
}

print "Importing from $filename...\n" if( $noise >= 1 );
print "Reading fields:\n" if( $noise > 1 );
foreach my $field ($ds->get_fields)
{
	printf("%s %s\n", $field->get_type(), $field->get_name()) if( $noise > 1 );
}
my $count = 0;
my $info =  { noise=>$noise, count=>0 }; 
EPrints::ImportXML::import_file( $session , $filename , \&deal, $ds, $info );
$count = $info->{count};
print "Done importing $count objects from $filename\n" if( $noise >= 1 );

$session->terminate();
print "Exiting normally.\n" if( $noise >= 2 );
exit;

sub deal 
{
	my( $session , $dataset , $obj, $info ) = @_;

	if( $info->{noise} >= 2 )
	{
		print "Importing: ".$obj->get_id()."\n";
	}

	$session->get_db()->add_record( $dataset, $obj->{data} );

	$info->{count}++;
}
