######################################################################
#
# COMMENTME
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################
#!/usr/bin/perl -w -I/opt/eprints/perl_lib

#cjg LIB

use Sys::Hostname;
use EPrints::Config;
use EPrints::DOM;
use EPrints::Database;
use DBI;

use strict;

my $MYSQL = "/usr/local/bin/mysql";
# cjg get from config later.

my $REGEXP_HOSTNAME_MIDDLE = '[a-z0-9]+(\.[a-z0-9]+)*';
my $REGEXP_HOSTNAME = '^'.$REGEXP_HOSTNAME_MIDDLE.'$';
my $REGEXP_HOSTNAME_FULL = '^[a-z0-9]+(\.[a-z0-9]+)+$';
my $REGEXP_VARNAME = '^[a-z][a-z0-9]*$';
my $REGEXP_NUMBER = '^[0-9]+$';
my $REGEXP_YESNO = '^(yes|no)$';

my %config = ();

print <<END;

Create new EPrint Archive

Please select an ID for the archive, which will be used to create a directory
and identify the archive. Lower case letters and numbers, may not start with
a number) eg. "lemurprints" or "test3"

END

my $archiveid = get_input( $REGEXP_VARNAME, 'Archive ID' );
print "$archiveid\n";

my( $configfile ) = $EPrints::Config::cfg_path."/conf-".$archiveid.".xml";
my( $archivedir ) = $EPrints::Config::base_path."/archives/".$archiveid;
if( -e $configfile )
{
	print "Config file detected:\n";
	print "Loading from: $configfile\n";
	my $loaded_config = EPrints::Config::get_archive_config( $archiveid );		
	if( !defined $loaded_config )
	{
		print "Can't read config file.\n\n";
		exit;
	}	
	foreach( keys %{$loaded_config} ) { $config{$_} = $loaded_config->{$_}; }
}
else
{
	$config{port} = 80;
	$config{host} = undef;
	$config{urlpath} = '/';
	$config{archiveroot} = "archives/".$archiveid;
	$config{configmodule} = "cfg/archive_config.pm";
	$config{aliases} = [];
	$config{dbname} = $archiveid;
	$config{dbhost} = "localhost";
	$config{dbport} = undef;
	$config{dbsock} = undef;
	$config{dbuser} = "eprints";
	$config{dbpass} = undef;
}

unless( -e $archivedir )
{
	print "We need to create $archivedir, doing it now...\n";
	unless( mkdir($archivedir) )
	{
		print "Problem creating directory\n\n";
		exit;
	}
}
unless( -d $archivedir )
{	
	print "$archivedir MUST be a directory.\n\n";
}
	
print <<END;

Please enter the fully qualified hostname of the archive. 

For a production system we recommend against using the real hostname of the 
machine. 

Example: $archiveid.footle.ac.uk

END

$config{host} = get_input( $REGEXP_HOSTNAME_FULL, 'Hostname', $config{host} );

print <<END;

Please enter the port of the webserver. This is probably 80, but you may wish 
to run apache on a different port if you are experimenting.

END

$config{port} = get_input( $REGEXP_NUMBER, 'Webserver Port', $config{port} );


# calculate example aliases
my $realhostname = hostname();
if( $realhostname !~ m/\./ )
{
	# No dots in the actual hostname! Lets try and got the
	# domain from resolv.conf
	my $domain = "";
	if( open( RESOLV, "/etc/resolv.conf" ) && 0)
	{
		while( <RESOLV> )
		{
			chomp;
			if( m/^search\s+([^\s]+)/ )
			{
				$domain = $1;	
				last;
			}
		}
		close RESOLV;
	}
	$domain = "mydomain.com" if( $domain eq "" );
	$realhostname.=".".$domain;
}
my @example_aliases = ();
push @example_aliases,$realhostname;

$realhostname=~m/^(([^\.]*)\.[^\.]*)(\.|$)?/;
push @example_aliases,$1 if( $3 eq ".");
push @example_aliases,$2;

$config{host}=~m/^(([^\.]*)\.[^\.]*)(\.|$)?/;
push @example_aliases,$1 if( $3 eq "." );
push @example_aliases,$2;
print <<END;

Please enter all the aliases which could reach the archive, and indicate if 
you would like EPrints to write a Redirect Rule to redirect requests to this
alias to the correct URL.
END
if( scalar @{$config{aliases}}==0 )
{
	print "Some suggestions:\n";
	foreach( @example_aliases )
	{
		print $_."\n";
	}
}
print <<END;

Enter a single hash (#) when you're done.

END

my @aliases = @{$config{aliases}};
$config{aliases} = [];

for(;;)
{
	my $default = shift @aliases;
	my $alias = get_input( '^('.$REGEXP_HOSTNAME_MIDDLE.'|#)$', 'Alias (enter # when done)',
		(defined $default ? $default->{name} : '#' ) );
	last if( $alias eq "#" );
	my $aliasrecord = {};
	$aliasrecord->{name} = $alias;
	$aliasrecord->{redirect} = 
		get_input( 
			$REGEXP_YESNO,
			"Redirect $alias to $config{host}",
			(defined $default && !$default->{redirect} ? 'no' : 'yes' ) );
	push @{$config{aliases}},$aliasrecord;
	print "\n";
}

print <<END;

MySQL Configuration 

END
$config{dbname} = get_input( $REGEXP_VARNAME, 'Database Name',  $config{dbname} );
$config{dbhost} = get_input( $REGEXP_HOSTNAME, 'MySQL Host',  $config{dbhost} );

print "\nYou probably don't need to set socket and port (unless you do!?).\n";
$config{dbport} = "#" if( !defined $config{dbport} );
$config{dbport} = get_input( '^[0-9]+|#$', 'MySQL Port (# for no setting)',  $config{dbport} );
$config{dbport} = undef if( $config{dbport} eq "#" );

$config{dbsock} = "#" if( !defined $config{dbsock} );
# can't remember what is a legal mysql socket... cjg
$config{dbsock} = get_input( '^.*$', 'MySQL Socket (# for no setting)',  $config{dbsock} );
$config{dbsock} = undef if( $config{dbsock} eq "#" );

$config{dbuser} = get_input( $REGEXP_VARNAME, 'Database User',  $config{dbuser} );
$config{dbpass} = get_input( $REGEXP_VARNAME, 'Database Password',  $config{dbpass} );

print <<END;

EPrints can create the database, and grant the correct permissions.

END

my $makedb = get_input( $REGEXP_YESNO, "Create database \"$config{dbname}\"", "yes" );
if( $makedb eq "yes" )
{
	print <<END;

Ok, I'll need to connect to the mysql database as root. What is the root 
password? #cjg hide password from display?
	
END
	my $mysqlrootpass = get_input( '^.*$', "MySQL Root Password" );

	print "Connecting to the database...\n";
	my $dbh = DBI->connect(
		EPrints::Database::build_connection_string(
			dbname=>"mysql",
			dbsock=>$config{dbsock},
			dbport=>$config{dbport},
			dbhost=>$config{dbhost} ),
		"root",
		$mysqlrootpass );


	if( !defined $dbh )
	{
		print <<END;

Hmmm. Problem connecting to database as root. We'll skip skip this but
you should create it by hand.

END
	}
	else
	{
		my $sth = $dbh->prepare( "show databases" );
		$sth->execute;
		my $dbexists = 0;
		my @row;
		while( @row = $sth->fetchrow_array )
		{
			$dbexists = 1 if $row[0] eq $config{dbname};
		}
		if( $dbexists )
		{
			print "Hmm. A database called $config{dbname} already exists, oh well.\n\n";
		}
		else
		{
			my $SQL = "CREATE DATABASE ".$config{dbname};
			print "DOING: $SQL\n";
			$dbh->do( $SQL );
		}
		print "Setting MySQL privs\n";
		#cjg @localhost ??? what about remote mysql's?

		my $SQL = 'GRANT SELECT, INSERT, UPDATE, DELETE, CREATE ON '.$config{dbname}.'.* TO '.$config{dbuser}.'@localhost IDENTIFIED BY "'.$config{dbpass}.'"';
		print "DOING: $SQL\n";
		$dbh->do( $SQL );

		print "Disconnecting from database.\n";
		$dbh->disconnect;
	}
}
 

######
#
# Write XML Config FIle
#

my $doc = new EPrints::DOM::Document();
my $doctype = $doc->createDocumentType( "archive" );
$doc->setDoctype( $doctype );

my $xmldecl = $doc->createXMLDecl( "1.0", "iso-8859-1", "yes" );
$doc->setXMLDecl( $xmldecl );

my $t_archive = $doc->createElement( "archive" );
$t_archive->setAttribute( "id", $archiveid );
$doc->appendChild( $t_archive );

$t_archive->appendChild( info_tag( $doc, "host", $config{host} ) );
foreach( @{$config{aliases}} )
{
	$t_archive->appendChild( info_tag( $doc, "alias", $_->{name}, "redirect", $_->{redirect} ) );
}
foreach( "port", "urlpath", "archiveroot", "configmodule",
	 "dbname","dbhost","dbport","dbsock","dbuser","dbpass" )
{
	$t_archive->appendChild( info_tag( $doc, $_, $config{$_} ) );
}
$t_archive->appendChild( $doc->createTextNode( "\n" ) );

print "Writing Config File to:\n$configfile...\n";
$doc->printToFile( $configfile );
# chmod !!! cjg
print "...done\n\n";


# Make filesystem

# Link in initial disk0  (?)

# Register with website!

# Run make_apache_conf

# give advice.

exit;

#######################################################################

sub info_tag
{
	my( $doc, $tagname, $value, $attr, $attrvalue ) = @_;

	my $frag = $doc->createDocumentFragment();
	$frag->appendChild( $doc->createTextNode( "\n    " ) );
	my $tag = $doc->createElement( $tagname );
	$tag->appendChild( $doc->createTextNode( $value ) );
	if( defined $attr )
	{
		$tag->setAttribute( $attr, $attrvalue );
	}
	$frag->appendChild( $tag );
	return $frag;
}

sub get_input
{
	my( $regexp, $prompt, $default ) = @_;

	$prompt = "" if( !defined $prompt);
	for(;;)
	{
		print $prompt;
		if( defined $default )
		{
			print " [$default] ";
		}
		print "? ";
		my $in = <STDIN>;
		chomp $in;
		if( $in eq "" && defined $default )
		{
			return $default;
		}
		if( $in=~m/^$regexp$/ )
		{
			return $in;
		}
		else
		{
			print "Bad Input, try again.\n";
		}
	}
}


