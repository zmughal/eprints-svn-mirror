#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  Generate DTD
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

use EPrints::Archive;
use EPrints::Config;
use strict;

#cjg Write a more simple conf if only one language involved?

my $archiveid = $ARGV[0];
my $site_sysfile = EPrints::Config::get( "sys_path" )."/auto-apache.conf";
my $site_incfile = EPrints::Config::get( "sys_path" )."/auto-apache-includes.conf";
my $site_userfile = EPrints::Config::get( "cfg_path" )."/apache.conf";
unless( -e $site_userfile )
{
	open( CONF, ">$site_userfile" ) || die "Can't write to $site_userfile";
	print CONF <<END;
#
# apache.conf include file for EPrints
#
# If this file exists then it will not be over written by
#
# Put your own extra directives for this site here
#
# Comment out the "Include" lines if you don't want to use the
# autogenerated config for this archive.
#

# Include list of 'Include's for each archive
Include $site_incfile

# Include autogenerate apache.conf elements
Include $site_sysfile




END
	close CONF;
}


my $startupfile = EPrints::Config::get( "bin_path" )."/startup.pl";
open( CONF, ">$site_sysfile" ) || die "Can't write to $site_sysfile";
print CONF <<END;
#
# auto-apache.conf include file for EPrints
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf
#

NameVirtualHost *
PerlRequire $startupfile

END
close CONF;


open( CONF, ">$site_incfile" ) || die "Can't write to $site_incfile";
print CONF <<END;
#
# auto-apache-inc.conf include file for EPrints
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf
#
# List of files to include for archive specific config...

END
my $a_archiveid;
foreach $a_archiveid ( EPrints::Config::get_archive_ids() )
{
	my $archive_config = EPrints::Config::get_archive_config( $a_archiveid );
	my $archive_inc = $archive_config->{archiveroot}."/cfg/apache.conf";
	print CONF <<END;
# $a_archiveid
Include $archive_inc

END
}
close CONF;


unless( defined $archiveid )
{
	print "No archive ID specified, just updating general eprints apache conf files.\n\n";
	exit;
}

########################################F#N#O#R#D########
# 
#   Write apache conf files for a specific archive
#

my $archive = EPrints::Archive->new_archive_by_id( $archiveid, 1 );
exit( 1 ) unless( defined $archive );

my $sysfile = $archive->get_conf( "system_files_path" )."/auto-apache.conf";
my $userfile = $archive->get_conf( "config_path" )."/apache.conf";

my $id = $archive->get_id();

unless( -e $userfile )
{
	open( CONF, ">$userfile" ) || die "Can't write to $userfile";
	print CONF <<END;
#
# apache.conf include file for $id
#
# If this file exists then it will not be over written by
# the generate_apacheconf command.
#
# Put your own extra directives for this site here
#
# Comment out the "Include" line if you don't want to use the
# autogenerated config for this archive.
#

Include $sysfile
END
	print "no userfile\n";
}

my $cgidir = EPrints::Config::get( "cgi_path" );
my $adminemail = $archive->get_conf( "adminemail" );
my $local_html_root = $archive->get_conf( "local_html_root" );
my $local_secure_root = $archive->get_conf( "local_secure_root" );
my $host = $archive->get_conf( "host" );

open( CONF, ">$sysfile" ) || die "Can't write to $sysfile";
print CONF <<END;
#
# auto-apache.conf include file for $id
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf $id
#

END
my $aliasinfo;
my $aliases = "";
foreach $aliasinfo ( @{$archive->get_conf( "aliases" )} )
{
	if( $aliasinfo->{redirect} )
	{
		my $vname = $aliasinfo->{name};
		print CONF <<END;

# Redirect to the correct hostname
<VirtualHost *>
  ServerName $vname
  Redirect / http://$host/
</VirtualHost>
END
	}
	else
	{
		$aliases.="  ServerAlias ".$aliasinfo->{name}."\n";
	}
}
print CONF <<END;

# The main virtual host for this archive
<VirtualHost *>
  ServerName $host
$aliases
  DocumentRoot $local_html_root
  ServerAdmin $adminemail

  Alias /perl $cgidir

  ErrorDocument 401 /error401.html
  #ErrorDocument 404 /error401.html
#cjg Do these even work?

  RewriteEngine on

  # Rewrite Rules. [L] means "last". So the rewrite engine goes
  # no further if it matches.

  # Protect /perl/ from other rewrite rules
  RewriteRule ^/perl/      -   [L]
#cjg all this can come from config
  RewriteRule ^/secure/([0-9]+)([0-9][0-9])([0-9][0-9])([0-9][0-9])/(.*)\$ /secure/\$1/\$2/\$3/\$4/\$5 [L]

  RewriteRule ^/archive/([0-9]+)([0-9][0-9])([0-9][0-9])([0-9][0-9])/(.*)\$ /archive/\$1/\$2/\$3/\$4/\$5

END

my @langs = @{$archive->get_conf( "languages" )};
my $defaultlang = $archive->get_conf( "defaultlanguage" );
my $langid;
foreach $langid ( @langs )
{
	next if( $langid eq $defaultlang );
		print CONF <<END;
  RewriteCond %{HTTP_COOKIE}   lang=$langid
  RewriteRule ^/(.*)\$         /$langid/\$1   [L]

END
}
  
print CONF <<END;
  # Default Language
  RewriteRule ^/(.*)\$         /$defaultlang/\$1   [L]

  <Directory "$local_secure_root">
    AuthName "Secure Document Area"
    AuthType "Basic"
    PerlAuthenHandler EPrints::Auth::authen
    PerlAuthzHandler EPrints::Auth::authz
    require valid-user
  </Directory>

  <Directory "$cgidir">
    SetHandler perl-script
    PerlHandler Apache::Registry
#cjg what does this do?
    PerlSendHeader Off
    Options +ExecCGI
  </Directory>
  <Directory "$cgidir/users">
    AuthName "User Area"
    AuthType "Basic"
    PerlAuthenHandler EPrints::Auth::authen
    PerlAuthzHandler EPrints::Auth::authz
    require valid-user
  </Directory>

  <Directory "$local_html_root">
    AddType 'text/html; charset=UTF-8' .html
#???
  </Directory>
</VirtualHost>

END

close CONF;


