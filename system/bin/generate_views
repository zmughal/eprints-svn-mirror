#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  Subject View Generator
#
#   This script generates the per-subject views of documents, and
#   regenerates the front page accordingly.
#
#   This script should be run periodically, AT LEAST every day but
#   preferably every hour.  If the archive on a busy or large site,
#   it might be an idea to nice this.
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

use EPrints::EPrint;
use EPrints::Session;
use EPrints::HTMLRender;
use EPrints::Subject;


use File::Copy;
use File::Path;

use strict;

my $session = new EPrints::Session( 1 , $ARGV[0] );
exit( 1 ) unless( defined $session );

my $fieldids = [ "year", "subjects", "type" ];

my $ds = $session->get_archive()->get_dataset( "archive" );

my $langid;
foreach $langid ( @{$session->get_archive()->get_conf( "languages" )} )
{
	$session->change_lang( $langid );
	my $dir =  $session->get_archive()->get_conf( "local_html_root" )."/".$langid."/view";
	my $tmpdir = $dir."_tmp";
	my $doomdir = $dir."_toerase";

	if( -e $tmpdir )
	{
		rmtree( $tmpdir );
	}

	EPrints::Utils::mkdir( $tmpdir );

	foreach( @{$fieldids} )
	{
		my $field = $ds->get_field( $_ );
		unless( $field->is_browsable() )
		{
			print STDERR "Cannot generate browse pages for field \"".$_."\"\n";
			print STDERR "- Type \"".$field->get_type()."\" cannot be browsed.\n";
			next;
		}
		make_field_pages( $field, $tmpdir, $ds );
	}

	# Make Browse Contents Page
	

	my( $ul, $li, $page, $a, $file, $title );
	$session->new_page();
	$page = $session->make_doc_fragment();
	$page->appendChild( $session->html_phrase( "bin/generate_views:browseintro" ) );
	$ul = $session->make_element( "ul" );
	foreach( @{$fieldids} )
	{
		my $field = $ds->get_field( $_ );
		$li = $session->make_element( "li" );
		$a = $session->make_element( "a", href=>$field->get_name()."/" );
		$a->appendChild( $session->make_text( $field->display_name( $session ) ) );
		$li->appendChild( $a );
		$ul->appendChild( $li );
	}
	$page->appendChild( $ul );
	
	$title = $session->phrase( "bin/generate_views:browsetitle" );
	$file = $tmpdir."/index.html";
	$session->build_page( $title, $page );
print STDERR "Writing: $file\n";
	$session->page_to_file( $file );

	move( $dir, $doomdir );
	move( $tmpdir, $dir );
	rmtree( $doomdir );
}

$session->terminate();
exit;

sub make_field_pages
{
	my( $field, $viewdir, $ds ) = @_;

	my $dir = $viewdir."/".$field->get_name();
	mkdir( $dir, 0775 ) or die "Can't make directory $dir: $!\n";
	my( @values ) = $field->get_values( $session );

	print $field->display_name( $session )."\n";

	my( $value, $title, $file );
	my( $ul, $li, $a, $page );

	#################################################
	##
	## Make Browse Pages

	my %size = ();

	foreach $value ( @values )
	{
		$session->new_page();
		$page = $session->make_doc_fragment();

		if( $field->is_type( "subject" ) )
		{

			# Note, this only shows ancestors and children. You might want
			# Ancestors and decendents (children of children of ... )
			# No support yet, but easy to add.

			my $subject = EPrints::Subject->new( $session, $value );
			my @ids= @{$subject->get_value( "ancestors" )};
			foreach( $subject->children() )
			{
				push @ids,$_->get_value( "subjectid" );
			}

        		$page->appendChild( $session->render_subjects( 
					\@ids, $field->get_property( "top" ), $value, 2 ) );
			$page->appendChild( $session->render_ruler() );
		}

		my $searchexp = new EPrints::SearchExpression(
				session=>$session,
				dataset=>$ds );

        	$searchexp->add_field( $field, "PHR:EQ:".$value );

		#cjg set order (it's in the site config)

        	$searchexp->perform_search();
		my $count = $searchexp->count();
		$size{$value} = $count;

		my $links = $session->make_doc_fragment();
		my $MAX = 5000;#cjg MAKE ME A CONFIG OPTION!

		if( $count > $MAX ) {
			$links->appendChild( $session->html_phrase( "bin/generate_views:toobig",
				n=>$session->make_text( $count ),
				max=>$session->make_text( $MAX ) ) );
		}
		else
		{
        		my @eprints = $searchexp->get_records();

			$links->appendChild( $session->html_phrase( "bin/generate_views:blurb",
					n=>$session->make_text( $count ) ) );

			my $eprint;
			foreach $eprint (@eprints)
			{
				my $p = $session->make_element( "p" );
				$p->appendChild( $eprint->render_citation_link() );
				$links->appendChild( $p );
			}
		}
		$searchexp->dispose();

		$file = $dir."/$value.include";
		print STDERR "Writing: $file\n";
		open( FILE, ">$file" );
		print FILE $links->toString;
		close FILE;

		$page->appendChild( $links );

		$title = $session->phrase( "bin/generate_views:title", 
					fieldname=>$field->display_name( $session ),
					fieldvalue=>$field->get_value_label( $session, $value ) );


		$file = $dir."/$value.html";
		$session->build_page( $title, $page );
		print STDERR "Writing: $file\n";
		$session->page_to_file( $file );
	
	}

	#################################################
	##
	## Make Index Page

	$session->new_page();
	$page = $session->make_doc_fragment();
	$page->appendChild( $session->html_phrase( "bin/generate_views:intro" ) );

	if( $field->is_type( "subject" ) )
	{
        	$page->appendChild( $session->render_subjects( \@values, $field->get_property( "top" ), undef, 2 ) );
	}
	else
	{
		$ul = $session->make_element( "ul" );
		foreach $value ( @values )
		{
			$li = $session->make_element( "li" );
			$a = $session->make_element( "a", href=>$value.".html" );
			$a->appendChild( $session->make_text( $field->get_value_label( $session, $value ) ) );
			$a->appendChild( $session->make_text( " (".$size{$value}.")" ) );
			$li->appendChild( $a );
			$ul->appendChild( $li );
		}
		$page->appendChild( $ul );
	}

	$title = $session->phrase( "bin/generate_views:indextitle", 
				fieldname=>$field->display_name( $session ) );
	$file = $dir."/index.html";
	$session->build_page( $title, $page );
print STDERR "Writing: $file\n";
	$session->page_to_file( $file );
}




