#!/usr/bin/perl -w -I/opt/ep2stable/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################


=pod

=head1 NAME

B<rehash_documents> - Regenerate all the hashes of all documents in the archive.

=head1 SYNOPSIS

B<rehash_documents> I<archiveid> [B<options>] [I<documentid>]

=head1 DESCRIPTION

This command regenerates the hash values for all documents. This will, by 
default, create an MD5 hash of all the files in the document in alphabetic
order of their path. This value is then stored as a string of hexidecimal
characters in the metadata for the document.

This value is automatically re-calculated if more files are uploaded or any
files are removed.

It is useful as a quick reliable way of seeing if the document contents has 
changed. If you generate other formats of a document on-the-fly the MD5 can
be useful as part of caching, or you may wish to pass the hashes to a third
party to allow you to later verify that an item was in the archive since
a given date.

=over 8

=item B<archiveid> 

The ID of the eprint archive to rehash the documents of.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

__GENERICPOD__

=cut

use EPrints::Session;

use File::Copy;
use File::Find;
use strict;
use Getopt::Long;
use Pod::Usage;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "rehash_documents" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 && scalar @ARGV != 2 ); 

our $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = new EPrints::Session( 1 , $ARGV[0] , $noise );
exit( 1 ) unless( defined $session );

if( defined $ARGV[1] )
{
	my $doc = EPrints::Document->new( $session, $ARGV[1] );
	if( !defined $doc )
	{
		$session->get_archive->log( 
"Document #".$ARGV[1]." not found. Can't rehash." );
	}
	else
	{
		rehash( $session, $doc->get_dataset, $doc, {} );
		print "Rehashed document #$ARGV[1]\n" if( $noise > 0);
	}
}
else
{
	print "Rehashing documents\n" if( $noise > 0);
	my $dataset = $session->get_archive()->get_dataset( "document" );
	my $info = { count=>0 };
	$dataset->map( $session , \&rehash, $info );
	if( $noise > 0)
	{
		print "Done rehashing ".$info->{count}." documents\n";
	}
}
$session->terminate();
exit;

sub rehash
{
	my( $session, $dataset, $doc, $info ) = @_;
	$doc->rehash;
	if( $noise > 1 )
	{
		print "Rehashed ".$doc->get_value( "docid" )."\n";
	}
	$info->{count}++;
}



$session->terminate();
	
exit;
