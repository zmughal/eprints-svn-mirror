use EPrints;

use Data::Dumper;
use strict;
my $session = new EPrints::Session;
Apache::exit( 0 ) unless( defined $session );

my $path_info = $ENV{"PATH_INFO"};

my $repository = $session->get_repository;

unless( $path_info =~ m!^/([^/]+)/([^/]+)/([^/]+)/! )
{
	error( $session, $session->html_phrase( "cgi/exportresource:no_id" ) );
	$session->terminate;
	exit;
}

my $type = $1;
my $id = $2;
my $format = $3;

if( !defined $id ) 
{
	error( $session, $session->html_phrase( "cgi/exportresource:no_id" ) );
	$session->terminate;
	exit;
}


my $plugin = $session->plugin( "Export::$format" );
if( !$plugin || !$plugin->matches("handles_rdf",1) )
{
	error( $session, $session->html_phrase( "cgi/export:not_available",
				format => $session->make_text( $format ) ) );
	$session->terminate;
	exit;
}


my $sql = '
SELECT rdf_subject,rdf_predicate,rdf_object,rdf_type,rdf_lang
FROM eprint
INNER JOIN eprint_rdf_resource  AS r ON (r.eprintid=eprint.eprintid)
INNER JOIN eprint_rdf_subject   AS s ON (r.eprintid=s.eprintid AND r.pos=s.pos)
INNER JOIN eprint_rdf_predicate AS p ON (s.eprintid=p.eprintid AND s.pos=p.pos)
INNER JOIN eprint_rdf_object    AS o ON (p.eprintid=o.eprintid AND p.pos=o.pos)
LEFT OUTER JOIN eprint_rdf_type AS t ON (o.eprintid=t.eprintid AND o.pos=t.pos)
LEFT OUTER JOIN eprint_rdf_lang AS l ON (t.eprintid=l.eprintid AND t.pos=l.pos)
WHERE eprint_status="archive" AND rdf_resource='.$repository->database->quote_value( "epx:$type/$id" );

my $cache = {};
$plugin->cache_general_triples( $cache );

my $sth = $repository->database->prepare( $sql );
$repository->database->execute( $sth, $sql );

while( my $spo = $sth->fetch )
{
        my $trip = {
                subject=>$spo->[0],
                predicate=>$spo->[1],
                object=>$spo->[2],
                type=>$spo->[3],
                lang=>$spo->[4] };
        my $hashkey = ($trip->{object}||"").'^^'.($trip->{type}||"").'@'.($trip->{lang}||"");
        $cache->{$trip->{subject}}->{$trip->{predicate}}->{$hashkey} =
                [ $trip->{object}||"", $trip->{type}, $trip->{lang} ];
}


$session->send_http_header( "content_type" => $plugin->param( 'mimetype' ) );
$plugin->initialise_fh( \*STDOUT );
my $namespaces = $plugin->get_namespaces();
print $plugin->output_triple_cache( $cache, $namespaces );

$session->terminate;


sub error
{
	my( $session, $msg ) = @_;

	$session->build_page( 
		$session->html_phrase( "cgi/export:error_title" ),
		$msg,
		"export_error" );
	$session->send_page;
}

