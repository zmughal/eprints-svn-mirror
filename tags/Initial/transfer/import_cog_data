#!/usr/bin/perl -w

use EPrints::Session;
use EPrints::MetaInfo;
use EPrints::MetaField;
use EPrints::EPrint;
use EPrints::Database;
use EPrints::Name;
use EPrints::SubjectList;

use Date::Parse;

use strict;


# Context map. Maps old context to new information.
#
#  oldcontext => [ type, published, refereed ] (defaults)


my %contextmap =
(
	"book"     => [ "bookchapter",  "pub",     "FALSE" ],
	"conf"     => [ "confpaper",    "unpub",   "FALSE" ],
	"ibook"    => [ "bookchapter",  "inpress", "FALSE" ],
	"iconf"    => [ "confpaper",    "inpress", "FALSE" ],
	"jour"     => [ "journalp",     "pub",     "FALSE" ],
	"other"    => [ "preprint",     "unpub",   "FALSE" ],
	"pbook"    => [ "bookchapter",  "pub",     "FALSE" ],
	"pconf"    => [ "confpaper",    "pub",     "FALSE" ],
	"pjess"    => [ "journalp",     "inpress", "TRUE"  ],
	"pjour"    => [ "journalp",     "pub",     "TRUE"  ],
	"pnews"    => [ "newsarticle",  "pub",     "FALSE" ],
	"ppost"    => [ "confposter",   "pub",     "FALSE" ],
	"preprint" => [ "preprint",     "unpub",   "FALSE" ],
	"tech"     => [ "techreport",   "pub",     "FALSE" ],
	"uconf"    => [ "confpaper",    "unpub",   "FALSE" ],
	"ujour"    => [ "preprint",     "unpub",   "FALSE" ],
	"upost"    => [ "confposter",   "unpub",   "FALSE" ],
	"urefg"    => [ "preprint",     "unpub",   "FALSE" ],
	"urjnl"    => [ "journalp",     "pub",     "FALSE" ],
	"utech"    => [ "techreport",   "pub",     "FALSE" ]
);

# Maps old IDs -> new IDs
my %idmap;

# Maps new fields -> what needs to be done for them.
#
# Plain "oldfieldname" means put the value of that old field straight into the 
#  new field.
#
# "*" means do nothing, it's been handled (e.g. generated by the system.)
#
# "+" means that the function with the prototype:
#
#     $value = translate_newfieldname( $entry, \@problems )
#
#  should be called to get the value for the new field. e.g. if there's an entry
#  "authors" => "+", the function &translate_authors( $old_value_hash_ref,
#  $problem_array_ref ) will be called to get the new value.

my %translations =
(
	"eprintid"    => "*",
	"user"        => "*",
	"dir"         => "*",
	"datestamp"   => "+",
	"additional"  => "*",
	"reasons"     => "*",
	"subjects"    => "+",
	"type"        => "*",
	"succeeds"    => "*",
	"commentary"  => "+",
	"abstract"    => "abstract",
	"altloc"      => "altloc",
	"authors"     => "+",
	"chapter"     => "chapter",
	"comments"    => "comments",
	"commref"     => "commref",
	"confdates"   => "cdate",
	"conference"  => "conf",
	"confloc"     => "+",
	"department"  => "dept",
	"editors"     => "+",
	"institution" => "univ",
	"ispublished" => "+",
	"keywords"    => "keywords",
	"month"       => "+",
	"number"      => "+",
	"pages"       => "+",
	"pubdom"      => "+",
	"publication" => "pubn",
	"publisher"   => "pubr",
	"refereed"    => "+",
	"reportno"    => "repnum",
	"title"       => "title",
	"volume"      => "volume",
	"year"        => "year"
);




my $session = new EPrints::Session( 1 );


# Open error file
open ERROR, ">import_cog_data.errorlog"
	or die "Couldn't create error log: $!\n";

# Open ID map file
open IDMAP, ">import_cog_data.idmap" or die "Couldn't create id map: $!\n";


# Read in the entries and import them

my %entry = ();
my $current_field;

while( <> )
{
	chomp();
	
	if( /^=+$/ )
	{
		# Marker
		if( scalar keys %entry > 0 )
		{
			# Do the import, if we've read anything in
			my @errors = &import_eprint( %entry );

			if( $#errors >= 0 )
			{
				# Lob the errors into the error file
				print ERROR "PROBLEM WITH $entry{idcode} ($idmap{$entry{idcode}})\n";
				foreach (@errors)
				{
					print ERROR "$_\n";
				}
			}
		}

		# Clear the current entry stuff
		%entry = ();
		$current_field = undef;
	}
	elsif( /^[\w\-]+:/ )
	{
		# A new field
		/([\w\-\d]+):\s*(.*)$/;

		$current_field = $1;
		if( defined $entry{$1} )
		{
			print ERROR "WARNING: Duplicate field $1\n";
		}
		$entry{$1} = $2;

		#print STDERR "Read >$1< = >$2<\n"; 
	}
	else
	{
		# Add it to the previous field

		if( defined $current_field )
		{
			# Remove beginning spaces
			s/^\s+//;
			# Add it to the current field value (adding a space)
			my $current_val = $entry{$current_field};
			$current_val .= " ".$_;
			$entry{$current_field} = $current_val;
		}
		else
		{
			print ERROR "Strange line: >>$_<<\n==\n";
		}
	}
}


# Now write the id map
foreach( keys %idmap )
{
	print IDMAP "$_:$idmap{$_}\n";
}


# Done !
close( ERROR );
close (IDMAP );



sub import_eprint
{
	my( %entry ) = @_;

	print STDERR "Importing entry: ".(defined $entry{idcode} ? $entry{idcode} : "(no ID code!!!)" )."\n";

	my @errors;
	
	# Get the context (pjour, ujour etc.)
	my $context = $entry{context};
	
	if( !defined $context )
	{
		# Default is a preprint
		$context = "preprint";
		#push @errors, "No context!";
		#return( @errors );
	}

	# Get defaults
	my( $type, $ispublished, $refereed ) = @{$contextmap{$context}};
	
	if( !defined $type )
	{
		push @errors, "Unrecognised context: $context";
		return( @errors );
	}
	
	my $userid = $entry{userid};
	if( !defined $userid )
	{
		push @errors, "No user ID!";
		return( @errors );
	}

	# Create the EPrint!
	my $eprint = EPrints::EPrint->create( $session,
	                                      $EPrints::Database::table_archive,
	                                      $userid );

	$eprint->{type} = $type;
	$eprint->{ispublished} = $ispublished;
	$eprint->{refereed} = $refereed;

	# Put the ID in the map
	$idmap{$entry{idcode}} = $eprint->{eprintid};

	# Get the relevant fields
	my @fields = EPrints::MetaInfo->get_eprint_fields( $type );
	
	my $f;
	
	foreach $f (@fields)
	{
		#print STDERR "Handling field $f->{name}\n";

		my $oldfield = $translations{$f->{name}};
		
		if( !defined $oldfield )
		{
			# Don't know what to do! Help!
			push @errors, "Don't know what to do about $f->{name}";
		}
		elsif( $oldfield eq "+" )
		{
			# Give to relevant translation function
			my $function_name = "translate_$f->{name}";
			{
				no strict 'refs';
				$eprint->{$f->{name}} = &{$function_name}( $eprint, 
				                                           \%entry,
				                                           \@errors );
			}
		}
		elsif( $oldfield ne "*" )
		{
			# Just take the value from the old field
			$eprint->{$f->{name}} = $entry{$oldfield};
		}
	}
	
	#print STDERR "Committing\n";

	# Put in the d/b
	$eprint->commit();

	#print STDERR "Validating\n";

	# Check for any problems
	my $probs = $eprint->validate_type();
	push @errors, @$probs;

	$probs = $eprint->validate_meta();
	push @errors, @$probs;

	$probs = $eprint->validate_subject();
	push @errors, @$probs;

#	$probs = $eprint->validate_documents();
#	push @errors, @$probs;

	EPrintSite::Validate->validate_eprint( $eprint, \@errors );

	#print STDERR "Import complete\n";

	return( @errors );
}

######################################################################
#
#  Translation functions: all have the prototype
#
# $newvalue = translate_fieldname( $new_eprint,
#                                  $old_value_hash,
#                                  $problem_array_ref )
#
######################################################################

sub translate_datestamp
{
	my( $eprint, $old_values, $problems ) = @_;
	
	#print STDERR "Parsing date: $old_values->{date}\n";

	my( $ss, $mm, $hh, $day, $month, $year, $zone ) = strptime(
		$old_values->{date} );

	while( length $day < 2 )
	{
		$day = "0".$day;
	}

	# strptime() gives months 0-11; convert to range 01-12.
	$month++;
	while( length $month < 2 )
	{
		$month = "0".$month;
	}

	return( $year."-".$month."-".$day );
}


sub translate_subjects
{
	my( $eprint, $old_values, $problems ) = @_;

	my $sublist = new EPrints::SubjectList;
	
	# First get the main code
	my $sub = &new_subject( $old_values->{catcode} );
	
	if( !defined $sub )
	{
		push @$problems, "Unknown subject tag: $old_values->{catcode}";
	}
	else
	{
		$sublist->add_tag( $sub );
	}
	
	# Now do the same for each of the cross-posted ones
	if( defined $old_values->{cross} )
	{
		my @cross = split /,\s*/, $old_values->{cross};

		foreach (@cross)
		{
			my $sub = &new_subject( $_ );

			if( !defined $sub )
			{
				push @$problems, "Unknown subject tag: $old_values->{catcode}";
			}
			else
			{
				$sublist->add_tag( $sub );
			}
		}
	}

	return( $sublist->to_string() );
}

sub new_subject
{
	my( $old_subject ) = @_;

#	print STDERR "Old subject = ".(defined $old_subject?$old_subject:"undefined!")."\n";
	
	# Remove the stuff before the .
	$old_subject =~ s/.*\.//;
	
	# Should be OK now, just need to change "neuro" to "neuro-neu"
	$old_subject = "neuro-neu" if( $old_subject eq "neuro" );

#print STDERR "New subject = ".(defined $old_subject?$old_subject:"undefined!")."\n";

	# Veryify the subject is valid
	my $dummy_subject = new EPrints::Subject( $session, $old_subject );

	return( undef ) if( !defined $dummy_subject );
	
	return( $old_subject );
}


sub translate_commentary
{
	my( $eprint, $old_values, $problems ) = @_;

	# Tricky one - might not have the paper being commented on in the map yet.
	if( defined $old_values->{commid} )
	{
		my $commid = $old_values->{commid};

		if( defined $idmap{$commid} )
		{
			# It's OK, we have the new ID
			return( $idmap{$commid} )
		}
		else
		{
			# We're going to have to defer
			return( "COMMIDOLD:$commid" );
		}
	}
	else
	{
		return( undef );
	}
}


sub translate_authors
{
	my( $eprint, $old_values, $problems ) = @_;
	
	return( &get_names( $old_values->{authors} ) );
}


sub get_names
{
	my( $oldlist ) = @_;

#print STDERR "Got in: $oldlist\n";
	
	my @oldnames = split /\s*\+\s*/, $oldlist;
	my $n;	

	my $namelist = undef;

#print STDERR "Number of names is ".(scalar @oldnames)."\n";

	foreach $n (@oldnames)
	{
		if( $n =~ /,/ )
		{
#print STDERR "surname, firstname\n";
			# It's in the form surname, first names (we hope)
			my( $surname, $firstnames ) = split /\,\s*/, $n;
			$namelist = EPrints::Name->add_name( $namelist,
			                                     $surname,
			                                     $firstnames );
		}
		else
		{
#print STDERR "firstname surname\n";
			# Form firstname surname
			my( $surname, $firstnames ) = &put_surname_first( $n );
			$namelist = EPrints::Name->add_name( $namelist, $surname, $firstnames )
				if( defined $surname );
		}
	}

#print STDERR "Returning: >>$namelist<<\n";

	return( $namelist );
}

sub put_surname_first
{
	my( $oldname ) = @_;
	
	return( undef ) if( !defined $oldname || $oldname eq "" );

	my @names = split /\s+/, $oldname;
	
	my $is_middle_bit = 0;

	# If there's more than one part to the name
	if( $#names >= 1 )
	{
		my @middle_bits = ( "van", "de", "von", "der" );
		
		my $possible_middle_bit = $names[$#names-1];
		
		foreach (@middle_bits)
		{
			$is_middle_bit = 1 if( (lc $_) eq (lc $possible_middle_bit) );
		}
	}
		
	my $firstnames = "";
	my $surname = "";
	my $i;

	if( $is_middle_bit )
	{
		$surname = $names[$#names-1]." ".$names[$#names];

		for( $i=0; $i<$#names-1; $i++ )
		{
			$firstnames .= " " if ($i>0);
			$firstnames .= $names[$i];
		}
	}
	else
	{
		$surname = $names[$#names];

		for( $i=0; $i<$#names; $i++ )
		{
			$firstnames .= " " if ($i>0);
			$firstnames .= $names[$i];
		}
	}

	my @result = ( $surname, $firstnames );
	
	return( @result );
}


sub translate_confloc
{
	my( $eprint, $old_values, $problems ) = @_;
	
	return( $old_values->{place} ) if( defined $old_values->{place} );
	return( $old_values->{locn} );
}


sub translate_editors
{
	my( $eprint, $old_values, $problems ) = @_;
	
	my $nameslist = undef;
	
	if( defined( $old_values->{editor} ) )
	{
		$nameslist = &get_names( $old_values->{editor} );
	}
	elsif( defined( $old_values->{editors} ) )
	{
		$nameslist = &get_names( $old_values->{editors} );
	}
	
	return( $nameslist );
}


sub translate_ispublished
{
	my( $eprint, $old_values, $problems ) = @_;
	
	# Probably set already, but in some cases will need to look at the
	# "edition" field...
	if( defined $old_values->{edition} )
	{
		return( "unpub" ) if( $old_values->{edition} eq "preprint" );
		return( "pub" ) if( $old_values->{edition} eq "reprint" );
	}
	
	return( $eprint->{ispublished} );
}


sub translate_month
{
	my( $eprint, $old_values, $problems ) = @_;
	
	my $val = $old_values->{month};

	if( !defined $val )
	{
		# Look for pdate
		return( undef ) if( !defined $old_values->{pdate} );
		
		$val = $old_values->{pdate};

		# Remove all digits and other crap
		$val =~ s/[\W]//g;
		$val =~ s/\d//g;
	}

	# Is the old one a number?
	if( $val =~ /^\d+$/ )
	{
		return( undef ) if( $val < 1 || $val > 12 );
		
		while( length $val < 2 )
		{
			$val = "0".$val;
		}
		
		return( $val );
	}
	else
	{
		# Perhaps it's in text. Try to guess from the first three letters.
		my %months = (
			"jan" => "01",
			"feb" => "02",
			"mar" => "03",
			"apr" => "04",
			"may" => "05",
			"jun" => "06",
			"jul" => "07",
			"aug" => "08",
			"sep" => "09",
			"oct" => "10",
			"nov" => "11",
			"dec" => "12" );
			
		my $firstthree = lc (substr ($val, 0, 3));
		
		return( $months{$firstthree} );
	}
}


sub translate_number
{
	my( $eprint, $old_values, $problems ) = @_;
	
	return( $old_values->{issue} ) if( defined $old_values->{issue} );
	
	return( $old_values->{number} );
}


sub translate_pages
{
	my( $eprint, $old_values, $problems ) = @_;
	
	my @pagevals;
	
	if( defined $old_values->{pages} && $old_values->{pages} ne "" )
	{
		# Form "pages: xxx-yyy"
		@pagevals = split /-/, $old_values->{pages};
	}
	elsif( defined $old_values->{pages1} && $old_values->{pages1} ne "" )
	{
		# Form "pages1: xxx   pages2: yyy"
		$pagevals[0] = $old_values->{pages1};
		$pagevals[1] = $old_values->{pages2} if( defined $old_values->{pages2} &&
		                                         $old_values->{pages2} ne "" );
	}
	else
	{
		# No page numbers at all
		return( undef );
	}
	
	if( $#pagevals == 1 )
	{
		# It's page-page

		# Return just the one if "from" and "to" are the same
		return( $pagevals[0] ) if( $pagevals[0] eq $pagevals[1] );
		
		# Otherwise return as a range
		return( $pagevals[0]."-".$pagevals[1] );
	}
	else
	{
		# Return as-is, single page
		return( $old_values->{pages} );
	}
}


sub translate_pubdom
{
	my( $eprint, $old_values, $problems ) = @_;

	return( "TRUE" ) if( defined $old_values->{owner} && 
	                     $old_values->{owner} eq "thdpubdom" );

	return( "FALSE" );
}


sub translate_refereed
{
	my( $eprint, $old_values, $problems ) = @_;
	
	my $ref = $old_values->{refereed};
	
	return( "TRUE" ) if( defined $ref && $ref eq "yes" );

	return( "FALSE" ) if( defined $ref && ( $ref eq "no" || $ref eq "on" ) );
	
	return( $eprint->{refereed} );
}

