#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<generate_apacheconf> - Create the apache config files needed for EPrints

=head1 SYNOPSIS

B<generate_apacheconf> [I<archiveid>] [B<options>] 

=head1 DESCRIPTION

This script generates the apache config files which will be used by EPrints. In the simple case all you need to do is run this script then add a line to your main 
apache configuration file - often, but not always, B</usr/local/apache/conf/httpd.conf>

 Include /opt/eprints2/cfg/apache.conf

Or elsewhere if you installed EPrints somewhere other than /opt/eprints2. This file then uses the "Include" directive to include all relevant apache config files from this EPrints installation.

=head1 ARGUMENTS

=over 8

=item B<archiveid> 

The ID of the eprint archive to use.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.

=back   

=head1 FILES

=over 4

=item B<EPRINTS/cfg/apache.conf>

This file is not updated if it already exists, so you can add system-wide
apache configuration directives here. By default it just includes the two other system wide files: auto-apache-includes.conf and auto-apache.conf

=item B<EPRINTS/cfg/auto-apache-includes.conf>

This file is updated with Include lines to each of the archive specific apache config files. This file should not be edited by hand,

=item B<EPRINTS/cfg/auto-apache.conf>

This file contains the system wide apache directives required by EPrints. This file should not be edited by hand.

=item B<EPRINTS/archives/ARCHIVEDIR/cfg/apache.conf>

This file is not updated if it already exists, so you can add archive-specific
apache configuration directives here. By default it just includes the automatically generated archive specific file: auto-apache.conf

=item B<EPRINTS/archives/ARCHIVEDIR/cfg/auto-apache.conf>

This file contains all the configuration directives needed for an archive. This is where the bulk of the configuration appears, the clever stuff, if you will. This file should not be edited by hand.

=back

__GENERICPOD__

=cut


use EPrints::Archive;
use EPrints::Config;
use strict;

use strict;
use Getopt::Long;
use Pod::Usage;

my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => => \$help,
	'man' => => \$man,
	'verbose+' => \$verbose,
	'quiet' => \$quiet
) || pod2usage( 2 );
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 && scalar @ARGV != 0 ); 

our $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

#cjg Write a more simple conf if only one language involved?

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $archiveid = $ARGV[0];
my $site_sysfile = EPrints::Config::get( "sys_path" )."/auto-apache.conf";
my $site_incfile = EPrints::Config::get( "sys_path" )."/auto-apache-includes.conf";
my $site_userfile = EPrints::Config::get( "cfg_path" )."/apache.conf";

print "Creating system wide apache conf files...\n" if( $noise >= 1 );
unless( -e $site_userfile )
{
	print "Creating $site_userfile.\n" if( $noise >= 2 );
	open( CONF, ">$site_userfile" ) || die "Can't write to $site_userfile";
	print CONF <<END;
#
# apache.conf include file for EPrints
#
# If this file exists then it will not be over written by
#
# Put your own extra directives for this site here
#
# Comment out the "Include" lines if you don't want to use the
# autogenerated config for this archive.
#

# Include list of 'Include's for each archive
Include $site_incfile

# Include autogenerate apache.conf elements
Include $site_sysfile




END
	close CONF;
}
else
{
	print "$site_userfile already exists.\n" if( $noise >= 2 );
}

print "Creating $site_sysfile.\n" if( $noise >= 2 );
my $startupfile = EPrints::Config::get( "bin_path" )."/startup.pl";
open( CONF, ">$site_sysfile" ) || die "Can't write to $site_sysfile";
print CONF <<END;
#
# auto-apache.conf include file for EPrints
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf
#

NameVirtualHost *
PerlRequire $startupfile

END
close CONF;


print "Creating $site_incfile.\n" if( $noise >= 2 );
open( CONF, ">$site_incfile" ) || die "Can't write to $site_incfile";
print CONF <<END;
#
# auto-apache-includes.conf include file for EPrints
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf
#
# List of files to include for archive specific config...

END
my $a_archiveid;
foreach $a_archiveid ( EPrints::Config::get_archive_ids() )
{
	my $archive_config = EPrints::Config::get_archive_config( $a_archiveid );
	my $archive_inc = $archive_config->{archiveroot}."/cfg/apache.conf";
	print CONF <<END;
# $a_archiveid
Include $archive_inc

END
}
close CONF;
print "...done creating system wide apache conf files.\n" if( $noise >= 1 );


unless( defined $archiveid )
{
	print "No archive ID specified, only system wide apache conf files updated\n" if( $noise >= 1 );
	exit;
}

########################################F#N#O#R#D########
# 
#   Write apache conf files for a specific archive
#

my $archive = EPrints::Archive->new_archive_by_id( $archiveid, 1 );
exit( 1 ) unless( defined $archive );

my $sysfile = $archive->get_conf( "config_path" )."/auto-apache.conf";
my $userfile = $archive->get_conf( "config_path" )."/apache.conf";

my $id = $archive->get_id();

print "Creating apache conf files for archive $archiveid...\n" if( $noise >= 1 );
unless( -e $userfile )
{
	print "Creating $userfile.\n" if( $noise >= 2 );
	open( CONF, ">$userfile" ) || die "Can't write to $userfile";
	print CONF <<END;
#
# apache.conf include file for $id
#
# If this file exists then it will not be over written by
# the generate_apacheconf command.
#
# Put your own extra directives for this site here
#
# Comment out the "Include" line if you don't want to use the
# autogenerated config for this archive.
#

Include $sysfile
END
}
else
{
	print "$userfile already exists.\n" if( $noise >= 2 );
}

my $cgidir = EPrints::Config::get( "cgi_path" );
my $adminemail = $archive->get_conf( "adminemail" );
my $htdocs_path = $archive->get_conf( "htdocs_path" );
my $htdocs_secure_path = $archive->get_conf( "htdocs_secure_path" );
my $host = $archive->get_conf( "host" );
my $userhome = $archive->get_conf( "userhome" );

print "Creating $sysfile.\n" if( $noise >= 2 );
open( CONF, ">$sysfile" ) || die "Can't write to $sysfile";
print CONF <<END;
#
# auto-apache.conf include file for $id
#
# DO NOT EDIT, this file is created by bin/generate_apacheconf
# and may be overwritten. To modify, change the archive configuration
# and re-run: bin/generate_apacheconf $id
#

END
my $aliasinfo;
my $aliases = "";
foreach $aliasinfo ( @{$archive->get_conf( "aliases" )} )
{
	if( $aliasinfo->{redirect} )
	{
		my $vname = $aliasinfo->{name};
		print CONF <<END;

# Redirect to the correct hostname
<VirtualHost *>
  ServerName $vname
  Redirect / http://$host/
</VirtualHost>
END
	}
	else
	{
		$aliases.="  ServerAlias ".$aliasinfo->{name}."\n";
	}
}
print CONF <<END;

# The main virtual host for this archive
<VirtualHost *>
  ServerName $host
$aliases
  DocumentRoot $htdocs_path
  ServerAdmin $adminemail

  Alias /perl $cgidir

  ErrorDocument 401 /error401.html
  ErrorDocument 404 /perl/handle_404

  RewriteEngine on

  # Rewrite Rules. [L] means "last". So the rewrite engine goes
  # no further if it matches.

  # Protect /perl/ from other rewrite rules
  RewriteRule ^/perl/      -   [L]
#cjg all this can come from config
  RewriteRule ^/secure/([0-9]+)([0-9][0-9])([0-9][0-9])([0-9][0-9])/(.*)\$ /secure/\$1/\$2/\$3/\$4/\$5 [L]

  RewriteRule ^/archive/([0-9]+)([0-9][0-9])([0-9][0-9])([0-9][0-9])/(.*)\$ /archive/\$1/\$2/\$3/\$4/\$5

END

my @langs = @{$archive->get_conf( "languages" )};
my $defaultlang = $archive->get_conf( "defaultlanguage" );
my $langid;
foreach $langid ( @langs )
{
	next if( $langid eq $defaultlang );
		print CONF <<END;
  RewriteCond %{HTTP_COOKIE}   lang=$langid
  RewriteRule ^/(.*)\$         /$langid/\$1   [L]

END
}

print CONF <<END;
  # Default Language
  RewriteRule ^/(.*)\$         /$defaultlang/\$1   [L]

  <Directory "$htdocs_secure_path">
    AuthName "Secure Document Area"
    AuthType "Basic"
    PerlAuthenHandler EPrints::Auth::authen
    PerlAuthzHandler EPrints::Auth::authz
    PerlSetVar EPrints_Security_Area Documents
    require valid-user
  </Directory>

  <Directory "$cgidir">
    SetHandler perl-script
    PerlHandler Apache::Registry
    PerlSendHeader Off
    Options ExecCGI
  </Directory>
  <Directory "$cgidir/users">
    AuthName "User Area"
    AuthType "Basic"
    PerlAuthenHandler EPrints::Auth::authen
    PerlAuthzHandler EPrints::Auth::authz
    PerlSetVar EPrints_Security_Area User
    require valid-user
  </Directory>

  <Directory "$htdocs_path">
    AddType 'text/html; charset=UTF-8' .html
  </Directory>

END

if( $archive->get_conf( "vlit" )->{enable} )
{
	foreach $langid ( @langs )
	{
		print CONF <<END;
  <Directory "$htdocs_path/$langid/archive">
    SetHandler perl-script
    PerlHandler EPrints::VLit::handler
  </Directory>

END
	}
}

print CONF <<END;

  # This sets up the change_user URL, which does
  # not have a REAL file associated with it, it
  # forces the browser to fail to register the
  # current user as a valid user, and thus ask
  # for re-validation.
  <Location "/change_user">
    AuthName "User Area"
    AuthType "Basic"
    PerlAuthenHandler EPrints::Auth::authen
    PerlAuthzHandler EPrints::Auth::authz
    PerlSetVar EPrints_Security_Area ChangeUser
    require valid-user
    Redirect /change_user $userhome
  </Location>

</VirtualHost>

END

close CONF;
print "...done creating apache conf files for archive $archiveid.\n" if( $noise >= 1 );
print "\nDo not forget to stop and restart apache to cause changes to take effect!\n" if( $noise >= 1 );

print "Exiting normally.\n" if( $noise >= 2 );
exit;

