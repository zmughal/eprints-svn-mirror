######################################################################
#
# EPrints::Archive
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################


=pod

=head1 NAME

B<EPrints::Archive> - A single eprint archive

=head1 DESCRIPTION

This class is a single eprint archive with its own configuration,
database and website.

=over 4

=cut

######################################################################
#
# INSTANCE VARIABLES:
#
#  $self->{config}
#     The configuration. A refererence to a hash generated by
#     ArchiveConfig.pm
#
#  $self->{class}
#     The package to which the config functions belong.
#
#  $self->{id}
#     The id of this archive.
#
#  $self->{ruler}
#     An XHTML tree describing the horizontal ruler for this archives
#     website.
#
#  $self->{langs}
#     A hash containing EPrints::Language objects for this archive,
#     keyed by iso lang id.
#
#  $self->{cstyles}
#     A cache of all the DOM blocks describing citation styles. Key is 
#     a lang id. Value is another hash where key is citation type and
#     value is the actual DOM tree.
#
#  $self->{html_templates}
#     A cache of the webpage templates for this site. A hash keyed by
#     lang id.
#
#  $self->{datasets}
#     A cache of all the EPrints::DataSets belonging to this archive
#     keyed by dataset id.
#
######################################################################

package EPrints::Archive;

use EPrints::Config;
use EPrints::Utils;
use EPrints::DataSet;
use EPrints::Language;

use File::Copy;

my %ARCHIVE_CACHE = ();


######################################################################
=pod

=item $archive = EPrints::Archive->new_archive_by_host_and_path( $hostpath )

This creates a new archive object. What archive is created depends
on the $hostpath - it works out which virtual host is in use and
which archive, if any is attached to that virtual host (and path).

=cut
######################################################################

sub new_archive_by_host_and_path
{
	my( $class, $hostpath ) = @_;
	my $archive;

	my $id = EPrints::Config::get_id_from_host_and_path( $hostpath );

	return if( !defined $id );

	return new_archive_by_id( $class, $id );
}


######################################################################
=pod

=item $archive = EPrints::Archive->new_archive_by_id( $id, [$noxml] )

Returns the archive with the given archiveid. If $noxml is specified
then it skips loading the XML based configuration files (this is
needed when creating an archive as it first has to create the DTD
files, and if it can't start you have a catch 22 situtation).

=cut
######################################################################

sub new_archive_by_id
{
	my( $class, $id, $noxml ) = @_;

	if( !defined $id )
	{
		print STDERR "No Archive ID specified.\n\n";
		return;
	}
	if( $id !~ m/[a-z_]+/ )
	{
		print STDERR "Archive ID illegal: $id\n\n";
		return;
	}
	
	if( defined $ARCHIVE_CACHE{$id} )
	{
		return $ARCHIVE_CACHE{$id};
	}
	
	#print STDERR "Loading: $id\n";

	my $self = {};
	bless $self, $class;

	$self->{config} = EPrints::Config::load_archive_config_module( $id );

	return unless( defined $self->{config} );

	$self->{class} = "EPrints::Config::$id";

	$self->{id} = $id;

	# If loading any of the XML config files then 
	# abort loading the config for this archive.
	unless( $noxml )
	{
		$self->generate_dtd() || return;
		$self->get_ruler() || return;
		$self->_load_datasets() || return;
		$self->_load_languages() || return;
		$self->_load_templates() || return;
		$self->_load_citation_specs() || return;
	}

	$ARCHIVE_CACHE{$id} = $self;
	#$self->log("done: new($id)");
	return $self;
}


######################################################################
=pod

=item $xhtml = $archive->get_ruler

Returns the ruler as specified in ruler.xml - it caches the result
so the XML file only has to be loaded once.

=cut
######################################################################

sub get_ruler
{
	my( $self ) = @_;

	if( defined $self->{ruler} )
	{
		return $self->{ruler}->cloneNode( 1 );
	}
	my $file = $self->get_conf( "config_path" )."/ruler.xml";
	
	my $doc = $self->parse_xml( $file , ParseParamEnt=>0 );
	if( !defined $doc )
	{
		$self->log( "Error loading: $file\n" );
		return undef;
	}
	my $ruler = ($doc->getElementsByTagName( "ruler" ))[0];
	return undef if( !defined $ruler );

	my( $frag ) = $doc->createDocumentFragment();
	foreach( $ruler->getChildNodes )
	{
		$ruler->removeChild( $_ );
		$frag->appendChild( $_ );
	}
	$self->{ruler} = $frag;
	return $self->{ruler}->cloneNode( 1 );
}	
	

######################################################################
# 
# $success = $archive->_load_languages
#
# Attempts to load and cache all the phrase files for this archive.
#
######################################################################

sub _load_languages
{
	my( $self ) = @_;
	
	my $defaultid = $self->get_conf( "defaultlanguage" );
	$self->{langs}->{$defaultid} = EPrints::Language->new( 
		$defaultid, 
		$self );

	if( !defined $self->{langs}->{$defaultid} )
	{
		return 0;
	}

	my $langid;
	foreach $langid ( @{$self->get_conf( "languages" )} )
	{
		next if( $langid eq $defaultid );	
		$self->{langs}->{$langid} =
			 EPrints::Language->new( 
				$langid , 
				$self , 
				$self->{langs}->{$defaultid} );
		if( !defined $self->{langs}->{$langid} )
		{
			return 0;
		}
	}
	return 1;
}


######################################################################
=pod

=item $language = $archive->get_language( [$langid] )

Returns the EPrints::Language for the requested language id (or the
default for this archive if $langid is not specified). 

=cut
######################################################################

sub get_language
{
	my( $self , $langid ) = @_;

	if( !defined $langid )
	{
		$langid = $self->get_conf( "defaultlanguage" );
	}
	return $self->{langs}->{$langid};
}

######################################################################
# 
# $success = $archive->_load_citation_specs
#
# Attempts to load and cache all the citation styles for this archive.
#
######################################################################

sub _load_citation_specs
{
	my( $self ) = @_;

	my $langid;
	foreach $langid ( @{$self->get_conf( "languages" )} )
	{
		my $file = $self->get_conf( "config_path" ).
				"/citations-$langid.xml";
	
		my $doc = $self->parse_xml( $file , ParseParamEnt=>0 );
		if( !defined $doc )
		{
			return 0;
		}

		my $citations = ($doc->getElementsByTagName( "citations" ))[0];
		if( !defined $citations )
		{
			print STDERR  "Missing <citations> tag in $file\n";
			$doc->dispose();
			return 0;
		}

		my $citation;
		foreach $citation ($doc->getElementsByTagName( "citation" ))
		{
			my( $type ) = $citation->getAttribute( "type" );
			
			my( $frag ) = $doc->createDocumentFragment();
			foreach( $citation->getChildNodes )
			{
				$citation->removeChild( $_ );
				$frag->appendChild( $_ );
			}
			$self->{cstyles}->{$langid}->{$type} = $frag;
		}
		$doc->dispose();

	}
	return 1;
}


######################################################################
=pod

=item $citation = $archive->get_citation_spec( $langid, $type )

Returns the DOM citation style for the given language and type. This
is the origional and should be cloned before you alter it.

=cut
######################################################################

sub get_citation_spec
{
	my( $self, $langid, $type ) = @_;

	return $self->{cstyles}->{$langid}->{$type};
}

######################################################################
# 
# $success = $archive->_load_templates
#
# Loads and caches all the html template files for this archive.
#
######################################################################

sub _load_templates
{
	my( $self ) = @_;

	my $langid;
	foreach $langid ( @{$self->get_conf( "languages" )} )
	{
		my $file = $self->get_conf( "config_path" ).
				"/template-$langid.xml";
		my $doc = $self->parse_xml( $file );
		if( !defined $doc )
		{
			return 0;
		}

		my $html = ($doc->getElementsByTagName( "html" ))[0];
		if( !defined $html )
		{
			$doc->dispose();
			print STDERR "Missing <html> tag in $file\n";
			return 0;
		}
		$doc->removeChild( $html );
		$doc->dispose();
		$self->{html_templates}->{$langid} = $html;
	}
	return 1;
}


######################################################################
=pod

=item $template = $archive->get_template( $langid )

Returns the DOM document which is the webpage template for the given
language. Do not modify the template without cloning it first.

=cut
######################################################################

sub get_template
{
	my( $self, $langid ) = @_;

	return $self->{html_templates}->{$langid};
}

######################################################################
# 
# $success = $archive->_load_datasets
#
# Loads and caches all the EPrints::DataSet objects belonging to this
# archive. Loads information from metadata-types.xml to pass to the
# DataSet constructor about what types are available.
#
######################################################################

sub _load_datasets
{
	my( $self ) = @_;

	my $file = $self->get_conf( "config_path" ).
			"/metadata-types.xml";
	my $doc = $self->parse_xml( $file );
	if( !defined $doc )
	{
		return 0;
	}

	my $types_tag = ($doc->getElementsByTagName( "metadatatypes" ))[0];
	if( !defined $types_tag )
	{
		$doc->dispose();
		print STDERR "Missing <metadatatypes> tag in $file\n";
		return 0;
	}

	my $dsconf = {};

	my $ds_tag;	
	foreach $ds_tag ( $types_tag->getElementsByTagName( "dataset" ) )
	{
		my $ds_id = $ds_tag->getAttribute( "name" );
		my $type_tag;
		$dsconf->{$ds_id}->{_order} = [];
		foreach $type_tag ( $ds_tag->getElementsByTagName( "type" ) )
		{
			my $type_id = $type_tag->getAttribute( "name" );
			my $field_tag;
			$dsconf->{$ds_id}->{$type_id} = [];
			push @{$dsconf->{$ds_id}->{_order}}, $type_id;
			foreach $field_tag ( $type_tag->getElementsByTagName( "field" ) )
			{
				my $finfo = {};
				$finfo->{id} = $field_tag->getAttribute( "name" );
				if( $field_tag->getAttribute( "required" ) eq "yes" )
				{
					$finfo->{required} = 1;
				}
				if( $field_tag->getAttribute( "staffonly" ) eq "yes" )
				{
					$finfo->{staffonly} = 1;
				}
				push @{$dsconf->{$ds_id}->{$type_id}},$finfo;
			}
		}
	}
	
	$self->{datasets} = {};
	my $ds_id;
	foreach $ds_id ( EPrints::DataSet::get_dataset_ids() )
	{
		$self->{datasets}->{$ds_id} = 
			EPrints::DataSet->new( $self, $ds_id, $dsconf );
	}

	$doc->dispose();
	return 1;
}


######################################################################
=pod

=item $dataset = $archive->get_dataset( $setname )

Returns the cached EPrints::DataSet with the given dataset id name.

=cut
######################################################################

sub get_dataset
{
	my( $self , $setname ) = @_;

	my $ds = $self->{datasets}->{$setname};
	if( !defined $ds )
	{
		$self->log( "Unknown dataset: ".$setname );
	}

	return $ds;
}


######################################################################
=pod

=item $confitem = $archive->get_conf( $key, [@subkeys] )

Returns a named configuration setting. Probably set in ArchiveConfig.pm

$archive->get_conf( "stuff", "en", "foo" )

is equivalent to 

$archive->get_conf( "stuff" )->{en}->{foo} 

=cut
######################################################################

sub get_conf
{
	my( $self, $key, @subkeys ) = @_;

	my $val = $self->{config}->{$key};
	foreach( @subkeys )
	{
		$val = $val->{$_};
	} 

	return $val;
}


######################################################################
=pod

=item $archive->log( @params )

Calls the log method from ArchiveConfig.pm for this archive with the 
given parameters. Basically logs the comments wherever the site admin
wants them to go. Printed to STDERR by default.

=cut
######################################################################

sub log
{
	my( $self , @params) = @_;
	&{$self->{class}."::log"}( $self, @params );
}


######################################################################
=pod

=item $result = $archive->call( $cmd, @params )

Calls the subroutine named $cmd from the configuration perl modules
for this archive with the given params and returns the result.

=cut
######################################################################

sub call
{
	my( $self, $cmd, @params ) = @_;

	return &{$self->{class}."::".$cmd}( @params );
}


######################################################################
=pod

=item @dirs = $archive->get_store_dirs

Returns a list of directories available for storing documents. These
may well be symlinks to other hard drives.

=cut
######################################################################

sub get_store_dirs
{
	my( $self ) = @_;

	my $docroot = $self->get_conf( "documents_path" );

	opendir( DOCSTORE, $docroot ) || return undef;

	my( @dirs, $dir );
	while( $dir = readdir( DOCSTORE ) )
	{
		next if( $dir =~ m/^\./ );
		next unless( -d $docroot."/".$dir );
		push @dirs, $dir;	
	}

	closedir( DOCSTORE );

	return @dirs;
}


######################################################################
=pod

=item $size = $archive->get_store_dir_size( $dir )

Returns the current storage (in bytes) used by a given documents dir.
$dir should be one of the values returned by $archive->get_store_dirs.

This should not be called if disable_df is set in SystemSettings.

=cut
######################################################################

sub get_store_dir_size
{
	my( $self , $dir ) = @_;

	my $filepath = $self->get_conf( "documents_path" )."/".$dir;

	if( ! -d $filepath )
	{
		return undef;
	}

	my @retval = EPrints::Utils::df_dir $filepath;
	return undef unless @retval;
	return (@retval)[3];
} 




######################################################################
=pod

=item $domdocument = $archive->parse_xml( $file, [%config] )

Turns the given $file into a XML DOM document. %config provides
extra settings for the XML Parser. This function also sets the
path in which the Parser will look for DTD files to the archives
config directory.

=cut
######################################################################

sub parse_xml
{
	my( $self, $file, %config ) = @_;

	unless( defined $config{Base} )
	{
		$config{Base} = $self->get_conf( "config_path" )."/";
	}
	$config{Namespaces} = 1;
	
	my $doc = EPrints::Config::parse_xml( $file, %config );
	if( !defined $doc )
	{
		$self->log( "Failed to parse XML file: $file" );
	}
	return $doc;
}


######################################################################
=pod

=item $id = $archive->get_id 

Returns the id string of this archive.

=cut
######################################################################

sub get_id 
{
	my( $self ) = @_;

	return $self->{id};
}


######################################################################
=pod

=item $returncode = $archive->exec( $cmd_id, %map )

Executes a system command. $cmd_id is the id of the command as
set in SystemSettings and %map contains a list of things to "fill in
the blanks" in the invocation line in SystemSettings. 

=cut
######################################################################

sub exec
{
	my( $self, $cmd_id, %map ) = @_;

	my $command = $self->invocation( $cmd_id, %map );

	$self->log( "Executing command: $command" );	

	my $rc = 0xffff & system $command;

	return $rc;
}	


######################################################################
=pod

=item $commandstring = $archive->invocation( $cmd_id, %map )

Finds the invocation for the specified command from SystemSetting and
fills in the blanks using %map. Returns a string which may be executed
as a system call.

=cut
######################################################################

sub invocation
{
	my( $self, $cmd_id, %map ) = @_;

	my $execs = $self->get_conf( "executables" );
	foreach( keys %{$execs} )
	{
		$map{$_} = $execs->{$_};
	}

	my $command = $self->get_conf( "invocation" )->{ $cmd_id };

	$command =~ s/\$\(([a-z]*)\)/$map{$1}/gei;

	return $command;
}


######################################################################
=pod

=item $success = $archive->generate_dtd

Regenerate the DTD file for each language. This file is used when
loading some of the XML files. It contains entities such as &ruler;
and &adminemail; which make maintaining the XML files easier.

The entites in the DTD file are configured by get_entities in the
ArchiveConfig.pm module.

Returns true. Might return false on error (not checking yet).

=cut
######################################################################

sub generate_dtd
{
	my( $self ) = @_;

	my $dtdfile = $self->get_conf( "cfg_path")."/xhtml-entities.dtd";
	open( XHTMLENTITIES, $dtdfile ) ||
		die "Failed to open system DTD ($dtdfile) to include ".
			"in archive DTD";
	my $xhtmlentities = join( "", <XHTMLENTITIES> );
	close XHTMLENTITIES;

	my $langid;
	foreach $langid ( @{$self->get_conf( "languages" )} )
	{	
		my %entities = $self->call( "get_entities", $self, $langid );
		my $file = $self->get_conf( "config_path" ).
				"/entities-$langid.dtd";
		my $tmpfile = $file.".".$$;
		open( DTD, ">$tmpfile" ) || die "Failed to open $tmpfile for writing";

		my $siteid = $self->{id};
	
		print DTD <<END;
<!-- 
	Entities file for $siteid, language ID "$langid"

	*** DO NOT EDIT, This is auto-generated ***
-->

END
		foreach( keys %entities )
		{
			my $value = $entities{$_};
			$value=~s/&/&#x26;/g;
			$value=~s/"/&#x22;/g;
			$value=~s/%/&#x25;/g;
			print DTD "<!ENTITY $_ \"$value\" >\n";
		}
		print DTD <<END;

<!--
	Generic XHTML entities 
-->

END
		print DTD $xhtmlentities;
		close DTD;
		move( $tmpfile, $file );
	}

	return 1;
}


1;

######################################################################
=pod

=back

=cut

