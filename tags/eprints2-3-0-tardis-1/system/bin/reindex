#!/usr/bin/perl -w -I/opt/ep2stable/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<reindex> - rebuild the indexes and order information for a dataset.

=head1 SYNOPSIS

B<reindex> I<archiveid> [B<options>] [I<dataset>]

=head1 DESCRIPTION

This script rebuilds the indexs are ordering information of a dataset,
eg. "archive" or "users". The time it takes will depend on the number
of records in the dataset.

This script should be run if you change the way that the free text
indexing function works or change the descriptions of subjects or
sets (and want them to sort correctly). 

B<reindex> should not be run lightly on a larget archive; a 
back-of-the-envelope estimate at running time is 1 second per record.

So 300 records will take about 5 minutes. 3000 records will take about
an hour and 30000 records will take something like 10 hours!

=head1 ARGUMENTS

=over 8

=item I<archiveid> 

The ID of the EPrint archive to use.

=item I<dataset>

This is the name of the dataset to reindex, one of: 
subject, user, archive, buffer, inbox, deletion, document

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=item B<--force>

Don't ask before running. If you want to automate this script, eg. run it once
every 6 months, you don't want it interactively checking if you want to continue!

=back   


__GENERICPOD__

=cut


use Getopt::Long;
use Pod::Usage;
use strict;

use EPrints::Session;
use EPrints::Subject;
use EPrints::ImportXML;

my $xml = 0;
my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $force = 0;
my $purge = 1;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'force' => \$force , 
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "reindex" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 2 );

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = new EPrints::Session( 1, $ARGV[0], $noise );
exit( 1 ) unless defined $session;
my $datasetid = $ARGV[1];
my $dataset = $session->get_archive()->get_dataset( $datasetid );
if( !defined $dataset )
{
	$session->terminate();	
	print "Exiting due to unknown dataset.\n" if( $noise >= 2 );
	exit;
}

unless( $force )
{
	if( $noise > 0 )
	{
		print "\n";
		print "You are about to reindex \"$datasetid\" in the $ARGV[0] archive.\n";
		print "This can take some time.\n\n";
		print "Number of records in set: ".$dataset->count( $session )."\n";
		
	}
	print "Continue (yes/no): ";
	my $input = <STDIN>;
	chomp( $input );
	unless( $input eq "yes" )
	{
		print "Aborting then.\n\n";
		$session->terminate();
		exit;
	}
}

$dataset->reindex( $session );

$session->terminate();
print "Exiting normally.\n" if( $noise >= 2 );
exit;

