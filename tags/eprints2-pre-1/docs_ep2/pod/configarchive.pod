=head1 EPrints Archive Configuration

This section describes all the configuration files in an single archive in the EPrints system.

=head2 Primary archive configuration file

Once you have created an EPrints archive the information you entered is placed
in an XML file in /opt/eprint2/archives/ with the name I<archiveid>.xml - this
file is documented later in this section.

=head2 Archive configuration directory

The bulk of the archive configuration is copied from /opt/eprints2/defaultcfg/ into the archives own configuration directory (usually /opt/eprints2/archives/I<archiveid>/cfg/ This directory will usually contain the following files and directories:

=over 8

=item B<apache.conf>

This file is generated by B<generate_apacheconf>. See the documentation of B<generate_apacheconf> for more information.

=item B<ArchiveConfig.pm>

The general configuration items which don't fit anywhere else are in this perl module. It is described fully later in this section of documentation. This module "requires" the other 5 perl modules. They are in seperate files to make them easier to get to grips with. 

=item B<ArchiveMetadataFieldsConfig.pm>

This module configures the metadata fields and the default values.

=item B<ArchiveOAIConfig.pm>

This module configures how the archive exports itself via the Open Archives protocol.

=item B<ArchiveRenderConfig.pm>

This module contains subroutines which handle rendering the data into XHTML (mostly) for display as webpages.

=item B<ArchiveTextIndexingConfig.pm>

This module handles turning UTF8 text strings into lists of index words for free text searches.

=item B<ArchiveValidateConfig.pm>

This module contains subroutines which check the metadata for problems.

=item B<auto-apache.conf>

This file is generated and overwritten by B<generate_apacheconf>. Do not edit it directly.  See the documentation of B<generate_apacheconf> for more information.

=item B<citations-I<languageid>.xml>

One of these files for each I<languageid> supported by this archive.
These XML files describe how to turn metadata for an item into a citation (with markup). They are described fully later in this section of documentation.

=item B<entities-I<languageid>.dtd>

One of these files for each I<languageid> supported by this archive. These DTD files are generated automaticly by B<generate_dtd> and should not be edited directly.

=item B<metadata-types.xml>

This XML file describes the various types of eprints, users etc. and which metadata fields are required or relevant to each. It is described fully later in this section of documentation.

=item B<phrases-I<languageid>.xml>

One of these files for each I<languageid> supported by this archive. These XML
files contain all the phrases which are specific to this archives such as the titles of metadata fields.  They are described fully later in this section of documentation.

=item B<ruler.xml>

This XML file just contains the horizontal divider used in webpages created by the system. It is described fully later in this section of documentation.

=item B<static/>

This directory contains the data needed to create the static webpages such as the homepage, and about page. It is described fully later in this section of documentation.

=item B<subjects>

This file contains the initial subjects for the system. It is described fully in the documentation for B<import_subjects>.

=item B<template-I<languageid>.xml>

One of these files for each I<languageid> supported by this archive. These XML/XHTML files describe the outline for webpages for this system.  They are described fully later in this section of documentation.

=back

=head1 XML Config Files in EPrints

This section contains some general information about the XML archive config files: template, phrases, ruler and citations. metadata-types.xml uses XML but these comments do not apply. 

=head2 XHTML

This files use HTML elements (and other elements too). XHTML is a fairly new version of HTML which is back compatable with HTML 4 but written using XML not SGML. This means that it is much stricter but less ambiguous and easier to parse and modify. Assuming you know HTML, the main differences are as follows:

=over 8

=item Tags must be closed

All elements must be closed, even ones such as E<lt>liE<gt>. Tags which do not have a close tag in HTML, like E<lt>brE<gt> or E<lt>img src="foo"E<gt> still must be closed eg. E<lt>img src="foo"E<gt>E<lt>/imgE<gt> - this can be abbreviated to the more neat looking:  E<lt>img src="foo" /E<gt>

=item All tags and attributes must be lower case

Self explanitary.

=item Strict definition of what tags may appear within which others.

Not actually checked by EPrints. It will let any rubbish past as long as it's valid XML. But that's no reason to be naughty. 

=item All attributes must be wrapped in quotes

In HTML the values of attributes do not have to be wrapped in quotes, but in XML (and therefore XHTML) they do.

=item All attributes must have a value 

In HTML some attribues did not require a value, for example in E<lt>hr noshadeE<gt> elements. In XHTML it is represented as  E<lt>hr noshade="noshade"E<gt>.

=back

So in summary, the HTML:

 <img SRC=someurl>
 <hr NOSHADE WIDTH=2>
 <P>Foo bar</P>

should become in XHTML:

 <img src="someurl" />
 <hr noshade="noshade" width="2" />
 <p>Foo bar</p>

And that's more or less it. See w3c.org for a complete description.

=head2 Language specific files.

phrases, template and citations have one instance per supported language. This allows the system to generate pages and emails in more than one language. Supporting a new language will require translating the all the english in the english config files currently shipped. If you do intend it do this (lots of work!) please get in touch with the eprints admin so that we can avoid duplicated effort.

=head2 Extra Entities

The XML files all use a DTD which defines a few extra entities. Entities are items in XML (or HTML) which start with "&" and end with ";" like &amp;. These additional entities come from the entities DTD file created by generate_entities. One DTD is created per language, although currently the only variation is the archive name.

=over 8

=item I<&archivename;>

The name of the archive in the current language.

=item I<&adminemail;>

The administrators email address.

=item I<&base_url;>

The base URL of the system (without a trailing slash)

=item I<&perl_url;>

The base URL of the CGI directory (without a trailing slash)

=item I<&frontpage;>

The URL of the system homepage.

=item I<&userhome;>

The URL of the user homepage.

=item I<&version;>

The current EPrints version.

=item I<&ruler;>

The XHTML of the standard divider.

=back

These entities are not available in the citations file.

=head2 Name Spaces and XHTML

These files contain a mixture of custom tags and XHTML. To keep these distinct the XML files contain a name space definition in the first element. The pratical upshot is that all EPrints own tags have the prefix "ep:". The namespace information is actually ignored by the current version of the eprints system.

example of mixed tags (and entities):

 <ep:phrase ref="lib/session:contact"><p>Feel free to contact 
 <a href="mailto:&adminemail;">&archivename; administration</a> 
 with details.</p></ep:phrase>

 eprints elements: phrase
 xhtml elements: p, a
 eprints entities: archiveemail, archivename

=head1 Primary archive configuration file

This XML file appears in the archives/ directory, usually /opt/eprints2/archives/, it describes the most very basic details about the archive. It is generated (and modified) by configure_archive and will not normally need to be edited.

EPrints looks in this directory for XML files and attempts to load them all
when starting the webserver.

This file should be chmod'd so that it can not be read by random users as it contains the database password.

The top level element is "archive" which has the attribute "id" which is the id of the archive. It should be the same as the filename. If this file is foo.xml then the id should be foo.

E<lt>archiveE<gt> contains a list of XML tags enclosing some text. eg.
  
  <host>stoatprints.org</host>

The following tags are expected in no special order:

=over 8

=item host

The hostname of this archive.

=item alias

This is optional and may be repeated. It has the attribute "redirect" which may be set to yes or no. This controls what virtual hosts are supported and if they  should redirect to the main (E<lt>hostE<gt>) one.

=item language 

The ISO id of a language supported by this archive. Repeatable. One of these should also be the defaultlanguage. See below.

=item port

The port number that the server is running on. Usually 80.

=item urlpath

The directory from the root of the server name. Usually /

=item archiveroot

The filesystem path of the rest of the archive configuration.

=item configmodule

The path to the perl module which does the main configuration (ArchiveConfig.pm)

=item dbname

The name of the MySQL database. Usually the same as the archive ID.

=item dbhost

The host on which MySQL is running. Usually localhost.

=item dbport 

An optional MySQL port, if it's not the standard one. Should be empty if we are to use the default.

=item dbsock

An optional MySQL socket. Should be empty if we are to use the default.

=item dbuser

The username to use when connecting to MySQL, usually "eprints".

=item dbpass

The password to use to connect to MySQL.

=item defaultlanguage

One of the supported language. This is the default for this archive.

=item adminemail

The email address of the archive administrator. I strongly suggest that this is an alias rather than a personal email address. If all your webpages contain "bob@footle.edu" and bill takes over from bob you would have to regenerate every page with "bill@footle.edu". Much better to set up an email alias or forward from "archive-support@footle.edu" and point it at bob (for now). Heed these words spoken from grim experience!

=item archivename

The name of the archive. This has an attribute "language" the value of which is an iso language id. There should be one of these archivename elements per supported language. eg.

    <archivename language="en">White Lemur</archivename>
    <archivename language="fr">la archive d'Lemur Blanc</archivename>

(apologies to the french, human languages aren't my strong suit)

=back

=head1 ArchiveConfig.pm

This module imports the other 5 perl modules. It allows lots of little tweaks to the system, which are all commented in the file.

It includes options to hide various features you may not want and to customise
the browse and search functions.

Customise what each type of user can and can't do, and how they authenticate their passwords.

Also methods which are called when a session starts and ends, to log things, to generate the entities for the entities file and security on non public files.

=head2 Browse Views

The browse views are generated by the script "generate_views" and what that
script does is configured by the "browse_views" item in the config.

It is a reference to a perl array [], each item of which is a hash {}.

The hash has 3 required properties and a number of optional ones.

=over 8

=item id [required]

The ID of this view - the view will be placed in a subdirectory of /views/ of this name. The ID is also used to identify the full name of this view in the phrase file. id=>"foo" would find it's title in the phrase "viewname_eprint_foo"

=item fields [required]

The list of the names of the fields to browse, seperated by a slash "/". This should normally be a single field unless you want to merge the values of two fields. The id part of a field may be specified by appending ".id" to the fieldname.

=item order [required]

A list of fields to sort by in order of priority, sepearted by slashes "/". A minus sign prefixing the fieldname "-" indicates reverse sorting on that field.

=item allow_null

Should we make a page for the "unset" condition? A page for items which do not have a year set may be useful. But for other fields this may be meaningless. Set it to 1 for true.

=item include

Generate a file for every value, ending in ".include" which contains the XHTML of the citations of records and the number of records, but without wrapping the site standard template around it.

=item nohtml

Normally the system generates a page like that described for "include" with a .html suffix and the site template. If nohtml is set to 1 then it won't. 

=item citation

Normally the citation used is that for the "type" of eprint. If this is set
then that citation (from the citations file) will be used for all items. This
allows for some clever stuff if you want to make page which can get sucked into another website. 

Normally the system puts a paragraph tag around each citation, but if you use a custom citation this will not happen.

=item nocount

Do not include the count of how many items at the top of the page.

=item nolink

The system generates an index.html in /view/ with a list of all the browse views available. Setting nolink to 1 will hide this item.

=item noindex

Do not generate an index.html file in /view/I<foo>/ listing all the values of the view and linking to their respective pages.

=back

The most common view is to browse by subject:

 { id=>"subject", allow_null=>0, fields=>"subjects", order=>"title/authors" }

A more complex view generates a view on author & editor ID's which are not advertised but may be captured by some other software to build staff CV pages.
 
 { id=>"person", allow_null=>0, fields=>"authors.id/editors.id", nohtml=>1,
   nolink=>1, noindex=>1, include=>1, order=>"-year/title" }

For my example person id "wh" this will generate a webpage called /view/person/wh.include (and one for each other value of authors or editors ID's) which can be captured by an external automated system.

=head2 User Privs

The user permission configuration allows you to set what types of user can and can't do. The user home page will only show a user options which they can do.

New types of user, and which data about themselves they can edit is set in metadata-fields.xml.

Permissions are set by "type" of user. By default there are 3 kinds of user:
"user", "editor" and "admin". 

Admin can, by default, do everything.

=over 8

=item subscription

Does not do anything. Subscriptions are planned for a later release.

=item set-password

Reset their password via the web registration system.

=item deposit

Submit items into the archive.

=item view-status

View the archive status page.

=item editor

User can edit then approve submitted items into the main archive, or delete them, or return them to sender. Also can remove items from the archive back into the edit buffer for corrections, and move records into the deleted table [delete them].

=item staff-view

User can perform a "staff search" of user or eprint records and view ALL the metadata.

=item edit-subject

User can edit the subject tree via the online interface.

=item edit-user

User can edit other users records.

=item change-email

User can change their email address via the web interface. This is safer than allowing them to edit it directly as it ensures they cannot set it to an address which they recieve (it mails them a confirmation pin number)

=item change-user

This allows the sinister feature which lets you log in as someone else. It still requires a password. This is useful if you want to perform admin tasks as a super user, then log-in as a normal user to deposit items. 

=back

=head1 ArchiveMetadataFieldsConfig.pm

=head2 Fields Configuration

Metadata is data about data. The information which we store to describe each record (eprint) in the system. Users also have metadata.

This module is the configuration for the metadata. This is probably the most important part of the system. 

The system automatically assigns some fields to each dataset (users, eprints, etc.) such as "type" to eprints and "username" to users. The majority of the fields are optional, and configured in this module.

Fields have a number of properties. The only required properties are "name" and "type". Name is the name of the field. This is used to identify this throughout the system. The other properties depend on what type the field is.

When you add a field you need to add the "human readable" version in the phrase file, this seperation allows you to change the description without changing the field itself. When you add a field named "foo" to the "eprint" metadata you should add "eprint_typename_foo" to the phrases. You may also wish to add "eprint_typehelp_foo" which is the explanation given to the user on the metadata input page.

The following types of field are supported, along with their special property options.

=over 8

=item int

Optional properties: digits

This type describes a positive integer. Stored as an INT in the database.

=item year

This type describes a year. It works pretty much like "int" but is always 4
digits long. Stored as an INT in the database.

=item longtext

Optional properties: input_rows, input_cols

This type describes an unlimited length text field. Used for things like titles and abstracts. It can't be effiently searched as a single value, the system indexes the words. See "free text indexing" section.

=item date

This type describes a date, always expressed as yyyy-mm-dd, eg. 1969-05-23. It is stored as a DATE in the database.

=item boolean

Optional properties: input_style

This is a simple yes/no field which is stored in the database as SET( 'TRUE','FALSE' ). It can be rendered as a menu, a check box or radio buttons. (See input_style)

=item name

Optional properties: input_name_cols

This type is used to store names of people (eg. authors). It is split into 4 parts: honourific, given names, family name and lineage. This may seem over fussy but it avoids people putting "Reverend" in the given names or "Junior" in the family name. If you dislike this you can hide honourific and lineage (See ArchiveConfig.pm).

We use "family name" rather than "last name" in the hope of avoiding international confusion (some countries list family name first, so their last name is what I would call their "christian", or "first", name.

Names are stored using 4 SQL fields. The name field "supervisor" would be stored as supervisor_honourific, supervisor_given, supervisor_family, supervisor_lineage. Each is a VARCHAR(255).

=item set

Required properties: options

Optional properties: input_rows

This type is a limited set of options. The list of options must be specified. Each option must also be added to the phrase file. Option "foo" of field "bar" in the "user" dataset will have the phrase id "user_fieldopt_bar_foo".

Stored in the database as a VARCHAR(255).

=item text

Optional properties: input_cols, maxlength

This is a simple text field. It normally has a maximum length of 255 ASCII characters, less if non-ASCII characters are used as these are UTF-8 encoded.

Stored in the database as a VARCHAR(255).

=item secret

Identical to "text" except that the input field is a starred-out password input field, and it is only ever written to the database, it can't be read back. Writing an empty value will NOT change the previous value. 

=item url

Identical to "text" except it is rendered and validated differently.

=item email

Identical to "text" except it is rendered and validated differently.

=item subject

Optional properties: top, showtop, showall, input_rows

This is a hierarchical subject tree. At first glance it works like sets, but
it can be searched for all items in or below a given subject. Subjects may be
added to the live system.

The subject tree starts at a subject with the id "ROOT" but a subject I<field> only offers all the items below the subject with the id "subjects". This can be changed using the "top" property, so that you can have two fields which options are different parts of the same tree. 

Subjects may have more than one parent. eg. I<biophysics> can appear under both I<physics> and I<biology>, while still being the same subject.

See the bin/import_subjects manpage for more information on seting up the initial subjects.

You may have more than one "subject" field, eg. Subject and Department, with unrelated parts of the subject tree as their "top".

A later version of eprints2 will have a feature which allows an admin user to limit an editor user to a certain subject (and things below it). So that in the above example you can declare an editor of either a Subject (capital-S) or a Department.

=item pagerange

A range of pages, eg 1-44. Currently not searchable.

Stored in the database as a VARCHAR(255).

=item datatype

Required properties: datesetid

Optional properties: input_rows

This field works like a set, but gets its options from the types of the dataset specified. 

For example, if you specified the datasetid "user" then, unless you've changed the defaults, would give the options "user","editor" and "admin" - which are the types of user specified in B<metadata-types.xml>.

Options are:

=over 4

=item I<user>

The types of user.

=item I<document>

The types of document.

=item I<eprint>

The types of eprint.

=item I<security>

Security levels of a document (probably not very useful).

=item I<language>

All the languages specified in B<languages.xml>

=item I<arclanguage>

The languages supported by this archive. Configured in ArchiveConfig.pm

=back

Stored in the database as a VARCHAR(255).

=item langid

This is used internally, it contains an ISO language ID. You probably don't want to use it. Stored as a CHAR(16).

=item id

This is also used internally, it contains the ID part of a field with the hasid property. Don't use it! Stored in the database as a VARCHAR(255).

=back

Field Properties:

=over 8

=item name

Required by: all

Default: NO DEFAULT

The name of the field. Strongly recommended to only be lowercase a-z only.

=item type

Required by: all

Default: NO DEFAULT

The type of field. One of the list described above.

=item browse_link

Optional on: all

Default: undef

This is the id of a "browse" view. This will hyperlink this value to the browse for that value when rendering it.

=item confid 

Internal use only. Sets the confid if a field is being created without a dataset. The confid is used as a fake dataset for generating phrase ids.

=item datasetid

Required by: datatype

Default: NO DEFAULT

Used to set which dataset's types are this fields options.

=item digits

Optional on: int

Default: 20

Maximum number of digits for this number. 

=item input_rows

Optional on: longtext, set, subject, datatype

Default: set in ArchiveConfig.pm

The number of input rows in a text area, or options to display at once in a menu. Setting to 1 will make a pull down menu (unless this is a "multiple" field).

=item input_cols

Optional on: text, longtext, url, email 

Default: set in ArchiveConfig.pm

The width of the input field.

=item input_name_cols

Optional on: name

Default: set in ArchiveConfig.pm

The width of the input fields of a "name" field. 

=item input_id_cols

Optional on: fields with "hasid" set.

Sets the width of the ID input field on a field with an ID.

Default: set in ArchiveConfig.pm

=item input_add_boxes

Optional on: fields with "multiple" or "multilang" set.

Default: set in ArchiveConfig.pm

How many boxes to add when the user hits the "more spaces" button.

=item input_boxes

Optional on: fields with "multiple" set.

Default: set in ArchiveConfig.pm

How many boxes to initially show on a multiple field.

=item input_style

Optional on: boolean

Default: undef

By default booleans render as a radio button. These other formats look a bit clearer on the input field:

=over 4

=item menu

Display as a pull-down menu. You will need to set the phrases
I<dataset>_fieldopt_I<fieldname>_TRUE and
I<dataset>_fieldopt_I<fieldname>_FALSE (where dataset & fieldname are the ids of the dataset and field). These are the menu options.

=item radio

Display as radio buttons (ones which deselect when you select another one). You will need to set the phrase I<dataset>_radio_I<fieldname>. This phrase should have two "pin" elements: true and false, which are the positions to place the radio buttons.

=back

=item fromform

Optional to: all

Default: undef

A reference to a perl function which will process the value from the form before storing it. The function will be passed ($value, $session) where value is the value from the form and session is the current EPrints::Session. It should return the processed value.

This could be used, for example, to turn a username "cjg" into a userid "312" for internal user. 

=item toform

Optional to: all

Default: undef

A reference to a perl function which will process the value just before it is displayed in the form. The function will be passed ($value, $session) where value is the value from the database and session is the current EPrints::Session. It should return the processed value.

This could be used, for example, to turn a userid "312" being used internally by your systems into more human-friendly username "cjg".

If you use toform then you should probably set fromform to change your values back again.

=item maxlength

Optional to: text, email, url, secret

Default: 255

The maximum length of the value.

=item hasid

Optional to: all

Default: 0

This adds an additional "ID" property to the field. This is most useful on a "name" field which is "multiple". It associates an additional value with the name, for example a username, or email address, which can be used to I<uniquely> identify that person. If you want to get an accurate list of all of someones papers then their name is NOT good enough.

You might also wish to make a "publication" text field have an ID which is an optional ISSN, but it makes more sense in "multiple" fields.

=item multilang

Optional to: all (but silly for date, year, int, boolean)

Default: 0

If set this makes the field "multilingual". That is to say it can have more than one value, one value per language.

For example, the "canadian stuff" archive may wish to make your title and abstract multilang so that authors can enter them in both french and english.

This is more useful than having title_en and title_fr as eprints I<understands> it and can render the version of the field appropriate to the viewer (if they set a language preference).

=item multiple

Optional to: all (but silly for date, year, int, boolean)

Default: 0

If set this property makes the field a LIST rather than one value and handles rendering it as a list and inputing it. The input field will appear with a default of 3 inputs and a "more spaces" button which will reload the page with more if you need more than 3.

This causes the field to be stored in a seperate SQL table.

=item options => -1,

Required by: set

Default: NO DEFAULT

This should be a array of options. eg.

 [ "blue", "green", "red" ]

=item required

Optional to: all

Default: 0

This indicates that this field is I<always> required. It is not recommended to set this, but rather indicate requirednes of fields by type in the metadata-types.xml file.

Either way you set it, required fields will cause the item they are in to fail to validate unless the field has a value.

=item requiredlangs

Optional to: fields with "multilang" property

Default: []

A list of languages which are required for this multilang field. eg. you can force an "en" (english) entry, while allowing them to optionally add others.

eg. [ "en", "fr" ] 

A list of codes can be found in languages.xml

=item showall

optional to: subjects

Default: 0

By default subjects are only shown if they are "depositable". This option makes all subjects, depositable or not, options.

=item showtop

optional to: subjects

Default: 0

If set then the topmost item in the subject is shown. Usually this is a container, eg. "subjects", and should remain hidden.

=item top

optional to: subjects

Default: "subjects"

Sets the top node in the tree. The options are all the children (and their children).

=item idpart

Used internally.

=item mainpart

Used internally.

=item render_single_value

Optional to: all

Default: undef

This overrides the rendering of a single item. In a multiple, multilang field it will be called on each value of the language to display. 

This is a reference to a function which takes ( $session, $field, $value ) and
returns a XHTML DOM fragment.

Set this to \&EPrints::Latex::render_string to make eprints try and spot latex in this fields values and render it as images instead!

=item render_value

Optional to: all

Default: undef

This is a reference to a function which will render the entire value of the field, overriding eprints own renderer. It should take as parameters: ( $session, $field, $value, $alllangs, $nolink )

The function should return an XHTML DOM fragment.

If $alllangs is set then the function should render all values on a multilang field, rather than just the "best" one.

If $nolink is set then no HTML anchor links should be used, eg. to link a URL.

=back

=head2 Defaults

=head2 Automatics

=head1 ArchiveOAIConfig.pm

cjg

=head1 ArchiveRenderConfig.pm

cjg

=head1 ArchiveTextIndexingConfig.pm

cjg

=head1 ArchiveValidateConfig.pm

cjg

=head1 citations-I<languageid>.xml

cjg

=head1 metadata-types.xml

cjg

=head1 phrases-I<languageid>.xml

cjg

=head1 ruler.xml

This file configures the horizontal divider which eprints uses, which is inserted in place of &ruler;

If you have no great dislike of <lt>hr<gt> horizontal rulers then you can leave it alone.

=head1 The static/ directory

cjg

=head1 subjects

cjg

=head1 template-I<languageid>.xml

cjg


