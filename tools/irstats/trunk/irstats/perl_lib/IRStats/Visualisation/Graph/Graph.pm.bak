package EPStats::Graph;

use strict;
use warnings;

use EPStats::GraphLegend;
use perlchartdir;
use List::Util 'shuffle';
use Data::Dumper;

my $base_dir = '/opt/stats/new';
my $graph_dir = '/img/graphs/';

# A graph object expects the following in the data hash:
#
#	type -> e.g line, bar, pie
#	title -> the title of the graph
#	x_title -> the x axis title
#	y_title -> the y axis title
#	x_labels -> the labels for the x axis
#	data_series -> the data, an array a hash for each series:
#		citation -> the title of the series (plain text or html) for the legend
#		data -> an array containing the data
#	filename -> the filename (should be the params id)
#
#
#


sub new
{
	my ($class, $data) = @_;
	my $self = bless $data, $class;
	$self->{'colours'} = $self->initialise_colours();
	$self->{'path'} = $base_dir . $graph_dir;
	$self->{'url_relative'} = $graph_dir . $self->{'filename'};

	return $self;
}

sub initialise_colours
{
	my ($self) = @_;
	my $colours = [];
	my $colour_values = [0x33, 0x66, 0x99, 0xcc, 0xff];
	foreach my $red (@{$colour_values}){
		foreach my $green (@{$colour_values}){
			foreach my $blue (@{$colour_values}){
				next if ( ($blue == $green) and ($blue == $red) );
				next if (
						(($blue >= 0xcc) and ($red >= 0xcc) and ($green > 0x99)) or
						(($blue >= 0xcc) and ($green >= 0xcc) and ($red > 0x99)) or
						(($green >= 0xcc) and ($red >= 0xcc) and ($blue > 0x99))
					);
				push @{$colours}, ($red * 0x010000) + ($green * 0x000100) + ($blue);
			}
		}
	}
	my $good_colours = [0x000080,0xff00ff,0xffff00,0x00ffff,0x800080,0x80000,0x008080,0x0000ff,0x00ccff,0xccffff,0xccffcc,0xffff99,0x99ccff];
	$colours = [@{$good_colours}, shuffle(@{$colours})];
	return $colours;
}

sub render
{
	my ($self) = @_;	

	if ($self->{'type'} eq 'pie')
	{
		return $self->render_pie();
	}
	elsif ($self->{'type'} eq 'line')
	{
		return $self->render_line();
	}
	elsif ($self->{'type'} eq 'bar')
	{
		return $self->render_bar();
	}
	else { die "unrecognised graph type $self->{'type'}\n";}

}

sub render_bar
{
	my ($self) = @_;

	my $c = new XYChart(600, 300, 0xeeeeff, 0x000000, 1);
	$c->setRoundedFrame();
	$c->setPlotArea(55, 58, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc);
	$c->addTitle($self->{'title'}, "timesbi.ttf", 15)->setBackground(0xccccff, 0x000000, perlchartdir::glassEffect());

	$c->yAxis()->setTitle($self->{'y_title'});
	$c->xAxis()->setTitle($self->{'x_title'});
	$c->xAxis()->setLabels($self->{'x_labels'});

	{
		use integer;
		$c->xAxis()->setLabelStep((($#{$self->{'x_labels'}}+1)/13)+1);
	}
	my $layer = $c->addBarLayer2($perlchartdir::Side, 3);
	foreach my $i (0 .. $#{$self->{'data_series'}})
	{
		$layer->addDataSet($self->{'data_series'}->[$i]->{'data'}, $self->{'colours'}->[$i]);
	}
	$layer->setLineWidth(2);
	$c->makeChart($self->{'path'} . $self->{'filename'});

	my $legend = EPStats::GraphLegend->new($self->{'data_series'}, $self->{'colours'});
	return "<div id=\"bar_graph\">
		<table style=\"margin-left: auto; margin-right: auto;\"><tr>
		<td>
		<img class=\"chart\" src = \"$self->{'url_relative'}\">
		</td>
		<td>" .
		$legend->render() .
		"</td>
		</tr></table>
		</div>";


}

sub render_line
{
	my ($self) = @_;

	my $c = new XYChart(600, 300, 0xeeeeff, 0x000000, 1);
	$c->setRoundedFrame();
	$c->setPlotArea(55, 58, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc);
	$c->addTitle($self->{'title'}, "timesbi.ttf", 15)->setBackground(0xccccff, 0x000000, perlchartdir::glassEffect());

	$c->yAxis()->setTitle($self->{'y_title'});
	$c->xAxis()->setTitle($self->{'x_title'});
	$c->xAxis()->setLabels($self->{'x_labels'});

	{
		use integer;
		$c->xAxis()->setLabelStep((($#{$self->{x_labels}}+1)/13)+1);
	}

	my $layer = $c->addLineLayer2($perlchartdir::Stack);
	foreach my $i (0 .. $#{$self->{'data_series'}})
	{
		$layer->addDataSet($self->{'data_series'}->[$i]->{'data'}, $self->{'colours'}->[$i]);
	}
	$layer->setLineWidth(2);
	$c->makeChart($self->{'path'} . $self->{'filename'});

	my $legend = EPStats::GraphLegend->new($self->{'data_series'}, $self->{'colours'});
	return "<div id=\"line_graph\">
		<table style=\"margin-left: auto; margin-right: auto;\"><tr>
		<td>
		<img class=\"chart\" src = \"$self->{'url_relative'}\">
		</td>
		<td>" .
		$legend->render() .
		"</td>
		</tr></table>
		</div>";

}

sub render_pie
{
	my ($self) = @_;

	my $c = new PieChart(500, 240, 0xeeeeff, 0x000000, 1);
	$c->setPieSize(250, 120, 80);
	$c->set3D();

	my $data = [];
	my $labels = [];
	foreach (@{$self->{'data_series'}})
	{
		push @{$data}, $_->{'data'};
		push @{$labels}, $_->{'citation'};
	}
	$c->setData($data, $labels);
	$c->setLabelLayout($perlchartdir::SideLayout);
	$c->setStartAngle(90,1);
	$c->setRoundedFrame();
	$c->addTitle($self->{'title'}, "timesbi.ttf", 15)->setBackground(0xccccff, 0x000000, perlchartdir::glassEffect());
	$c->makeChart($self->{'path'} . $self->{'filename'});

	return "<div class=\"pie_graph\">
		<img class=\"chart\" src = \"$self->{'url_relative'}\">
		</div>";

}

1;

