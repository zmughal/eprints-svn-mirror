#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  Erase the archive.
#
#   This script completely erases the archive contents, including all
#   database tables and eprint files.  After running this, the metadata
#   configuration can be safely updated and the create_databases
#   script run again.
#
#   This script asks for confirmation before actually erasing anything.
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################


## NEEDS A SESSION, eh?

use EPrints::Database;

use strict;

my $archive = EPrints::Archive->new_archive_by_id( $ARGV[0], 1 );
exit( 1 ) unless( defined $archive );

my $documents_path = $archive->get_conf( "documents_path" );
my $htdocs_path = $archive->get_conf( "htdocs_path" );
my $database = $archive->get_conf( "dbname" );

my $force = ( defined $ARGV[1] && $ARGV[1] eq "FORCE" );

# This script dosn't currently work on remote machines, which may well
# not allow remote admin log in anyway.


	#print "\n";
	#print "This script currently does not work with databases\n";
	#print "not running on the default port of localhost.\n";
	#print "\n";
	#exit;
#}

my $input;
unless( $force )
{
	# Write the confirmation prompt
	print "This script completely erases the archive, including all metadata,\n";
	print "database tables and eprint files.\n\n";
	print "Are you sure you want this to happen? (yes/no)\n";
	
	$input = <STDIN>;
	chomp( $input );
}

# We'll only work if they type "yes" exactly, otherwise we just abort.
unless( $force || $input eq "yes" )
{
	print STDERR "Aborting.\n";
	exit( 1 );
}
####################################################

# First erase the database tables. We now do this the dramatic way
# of dropping and recreating the database.
# This makes it possible to erase a really broken setup.

print "Dropping and recreating database (requires database root password)\n";
print "You will need to enter the MySQL root user password.\n";

# force shold skip this? cjg

my $mysqlrootpass = EPrints::Utils::get_input( '^.*$', "MySQL Root Password" );

print "\nConnecting to the database...\n";
my $dbh = DBI->connect(
	EPrints::Database::build_connection_string(
		dbname=>"mysql",
		dbsock=>$archive->get_conf( "dbsock" ),
		dbport=>$archive->get_conf( "dbport" ),
		dbhost=>$archive->get_conf( "dbhost" ) ),
	"root",
	$mysqlrootpass );


if( !defined $dbh )
{
	print <<END;

Hmmm. Problem connecting to database as root. Aborting.

END
	exit( 1 );
}
else
{
	print "Dropping database \"$database\"\n";
	$dbh->do( "drop database $database" );
	print "Re-creating database \"$database\"\n";
	$dbh->do( "create database $database" );
}
$dbh->disconnect;
print "\n";


print "Erasing eprint files...\n";

# Get available directories
opendir DOCSTORE, $documents_path
	or print STDERR "Can't open DOCSTORE";

# The grep here just removes the "." and ".." directories
my @doomeddirs = grep !/^\.\.?$/, readdir DOCSTORE;
closedir DOCSTORE;

# Remove the contents of each of the directories.
my $dir;
push @doomeddirs, $htdocs_path;
foreach $dir (@doomeddirs)
{
	print STDERR "Removing stuff in: $dir\n";
	my $rc = CORE::system( "rm -rf $documents_path/$dir/*" ) & 0xffff;
	print STDERR "Warning: Cleaning $documents_path/$dir didn't go smoothly\n" unless( $rc==0 );
}
mkdir( $htdocs_path, 0755 );
print "Done.\n";
