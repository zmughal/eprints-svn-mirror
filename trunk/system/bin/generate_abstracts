#!/usr/bin/perl -w -I/opt/eprints3/perl_lib 

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<generate_abstracts> - Regenerate all the static abstract pages for an EPrint repository

=head1 SYNOPSIS

B<generate_abstracts> I<repository_id> [B<options>] [I<eprintid>]

=head1 DESCRIPTION

This script recreates every static abstract page for an eprints repository. To save load on the database, as archived data should not change, EPrints creates static webpages containing the summary of each eprint. If you change the way the abstracts are rendered or change the site template then you will want to run this script.

=head1 ARGUMENTS

=over 8

=item B<repository_id> 

The ID of the eprint repository to use.

=item B<eprintid> 

An optional integer indicating that only the abstract page for record I<eprintid> should be updated. Handy for testing new configurations.


=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

__GENERICPOD__

=cut


use EPrints;

use strict;
use Getopt::Long;
use Pod::Usage;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

Getopt::Long::Configure("permute");

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "generate_abstracts" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 && scalar @ARGV != 2 ); 

our $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $handle = new EPrints::Handle( 1 , $ARGV[0] , $noise );
exit( 1 ) unless( defined $handle );

if( defined $ARGV[1] )
{
	my $eprint = $handle->get_eprint( $ARGV[1] );
	if( !defined $eprint )
	{
		$handle->get_repository->log( 
"EPrint #".$ARGV[1]." not found. Can't write abstract." );
	}
	else
	{
		make_static( $handle, $eprint->get_dataset, $eprint, {} );
		print "Wrote abstract #$ARGV[1]\n" if( $noise > 0);
	}
}
else
{
	print "Writing abstracts\n" if( $noise > 0);
	my $dataset = $handle->get_repository->get_dataset( "eprint" );
	my $info = { count=>0 };
	$dataset->map( $handle , \&make_static, $info );
	if( $noise > 0)
	{
		print "Done writing ".$info->{count}." abstracts\n";
	}
}
$handle->terminate();
exit;

sub make_static
{
	my( $handle, $dataset, $eprint, $info ) = @_;
	$eprint->generate_static();
	if( $noise > 1 )
	{
		print "Generated ".$eprint->get_value( "eprintid" )."\n";
	}
	$info->{count}++;
}
