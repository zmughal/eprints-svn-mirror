#!/usr/bin/perl -w

use FindBin;
use lib "$FindBin::Bin/../perl_lib";

######################################################################
#
#
######################################################################

=pod

=for Pod2Wiki

=head1 NAME

B<generate_abstracts> - Regenerate all the static abstract pages for an EPrint repository

=head1 SYNOPSIS

B<generate_abstracts> I<repository_id> [B<options>] [I<eprintid>]

=head1 DESCRIPTION

This script recreates every static abstract page for an eprints repository. To save load on the database, as archived data should not change, EPrints creates static webpages containing the summary of each eprint. If you change the way the abstracts are rendered or change the site template then you will want to run this script.

=head1 ARGUMENTS

=over 8

=item B<repository_id> 

The ID of the eprint repository to use.

=item B<eprintid> 

An optional integer indicating that only the abstract page for record I<eprintid> should be updated. Handy for testing new configurations.


=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   


=cut


use EPrints;

use strict;
use Getopt::Long;
use Pod::Usage;

my $version = 0;
my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

Getopt::Long::Configure("permute");

GetOptions( 
	'help|?' => \$help,
	'man' => \$man,
	'version' => \$version,
	'verbose+' => \$verbose,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "generate_abstracts" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 && scalar @ARGV != 2 ); 

our $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $repoid = $ARGV[0];

my $session = new EPrints::Session( 1 , $repoid , $noise );
if( !defined $session )
{
	print STDERR "Failed to load repository: $repoid\n";
	exit 1;
}

if( defined $ARGV[1] )
{
	my $eprint = EPrints::DataObj::EPrint->new( $session, $ARGV[1] );
	if( !defined $eprint )
	{
		$session->get_repository->log( 
"EPrint #".$ARGV[1]." not found. Can't write abstract." );
	}
	else
	{
		make_static( $session, $eprint->get_dataset, $eprint, {} );
		print "Wrote abstract #$ARGV[1]\n" if( $noise > 0);
	}
}
else
{
	print "Writing abstracts\n" if( $noise > 0);
	my $dataset = $session->dataset( "eprint" );
	my $info = { count=>0 };
	$dataset->map( $session , \&make_static, $info );
	if( $noise > 0)
	{
		print "Done writing ".$info->{count}." abstracts\n";
	}
}
$session->terminate();
exit;

sub make_static
{
	my( $session, $dataset, $eprint, $info ) = @_;
	$eprint->generate_static();
	if( $noise > 1 )
	{
		print "Generated ".$eprint->get_value( "eprintid" )."\n";
	}
	$info->{count}++;
}

=head1 COPYRIGHT

=for COPYRIGHT BEGIN

Copyright 2000-2011 University of Southampton.

=for COPYRIGHT END

=for LICENSE BEGIN

This file is part of EPrints L<http://www.eprints.org/>.

EPrints is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EPrints is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
License for more details.

You should have received a copy of the GNU General Public License
along with EPrints.  If not, see L<http://www.gnu.org/licenses/>.

=for LICENSE END

