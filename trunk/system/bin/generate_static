#!/usr/bin/perl -w

######################################################################
#
#  Generate static pages using site template.
#
#   This trawls through local_root/static. Every HTML file is given
#   the site frame and written to local_html_root. HTML files that
#   already have the full <HTML> .. </HTML> gubbins are left as-is.
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

use EPrints::Session;

use File::Copy;
use File::Find;
use strict;


my $session = new EPrints::Session( 1 , $ARGV[0] );

# change to base of site so expat can find the dtd directory.
chdir( $session->getSite->getConf( "site_root" ) );

print "____________________________\n";
my $language;
foreach $language ( keys %EPrints::Site::General::languages )
{
	print $language."\n";
	my $basepath = $session->getSite->getConf( "static_html_root" ).
	               "/$language";
	generateDTD( $session, $language, $basepath );	
	my $func = sub { generate_static( $language, $basepath, $session ) };
	find( { wanted=>$func, follow=>1 }, $basepath );
}
exit;


$session->terminate();

sub generateDTD
{
	my( $session, $language, $basepath ) = @_;
	my $filename = $basepath."/eprints.dtd";
	print "Writing DTD: $filename\n";
	
	open( DTD, ">$filename" ) || 
		die( "Can't open $filename for writing" );

	print DTD "<!-- DTD created and used by generate_static -->\n";
	print DTD "<!ENTITY sitename \"".
		$session->getSite->getConf( "sitename" ).
		"\" >\n";
	print DTD "<!ENTITY description \"".
		$session->getSite->getConf( "description" ).
		"\" >\n";
	print DTD "<!ENTITY admin \"".
		$session->getSite->getConf( "admin" ).
		"\" >\n";
	print DTD "<!ENTITY perlroot \"".
		$session->getSite->getConf( "server_perl" ).
		"\" >\n";
	print DTD "<!ENTITY staticroot \"".
		$session->getSite->getConf( "server_static" ).
		"\" >\n";
	print DTD "<!ENTITY frontpage \"".
		$session->getSite->getConf( "frontpage" ).
		"\" >\n";
	print DTD "<!ENTITY subjectroot \"".
		$session->getSite->getConf( "server_subject_view_stem" ).
		"\" >\n";
	print DTD "<!ENTITY version \"".
		$EPrints::Version::eprints_software_version.
		"\" >\n";
	close DTD;
}
	

sub generate_static
{
	my( $language , $basepath , $session ) = @_;
	# Ignore CVS directories
	return if( $File::Find::name =~ /\/CVS/ );

	my $destination_filename = $File::Find::name;

	my $newpath = $session->getSite->getConf( "local_html_root" ).
	              "/$language";
	$destination_filename =~ s/$basepath/$newpath/;

print STDERR "$File::Find::name -> $destination_filename\n";
	
	if( -d $File::Find::name )
	{
		# If it's a directory, just make sure it exists in the destination.
		unless( -e $destination_filename )
		{
			mkdir( $destination_filename, 0775 )
				or die "Can't make directory $destination_filename: $!\n";
		}
	}
	else
	{
		# Is this is an HTML template file?
		if( $destination_filename =~ s/\.xhtml$/.html/i )
		{
			my $parser = new XML::DOM::Parser( 
					ParseParamEnt => 1,
					NoLWP => 1,
					ProtocolEncoding => "ISO-8859-1" );
			my $dom = eval { 
				$parser->parsefile( $File::Find::name );
			};
			if( $@ )
			{
				my $err = $@;
				$err =~ s# at /.*##;
				die "Error parsing $File::Find::name\n$err";
			}
			print STDERR "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \n";
			print STDERR $dom->getFirstChild->getNodeName."\n";
			print $dom->printToFile( $destination_filename );
		}
		else
		{
			# Just need to copy the file verbatim
			File::Copy::copy( $File::Find::name, $destination_filename ) or
				die "Couldn't copy $File::Find::name to $destination_filename: $!\n";
		}
	}
}
