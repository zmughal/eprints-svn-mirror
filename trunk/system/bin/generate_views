#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<generate_views> - Generate static browse pages for an EPrint archive

=head1 SYNOPSIS

B<generate_views> I<archiveid> [B<options>] 

=head1 DESCRIPTION

This script renders static "browse views" for an EPrint Archive.

What this does is generate browse pages for each field configured as browsable in B<ArchiveConfig.pm>. It creates a static web page for each value of that field, and index pages to navigate to them. 

For example, if we make "year" browseable then this script will generate one page for each unique value of the year field. So a user can then view the 1995 page and see links to all the 1995 eprints.

Advantages of this are that this puts less load on the database than user searches. Assuming you pick two or three sensible fields to make browsable. 

This script should be run every hour or so, but that should once a day or even once a week on large archives, as the more eprints the longer it will take to run. The rough length of time to run this is of the order of O( B<languages> * B<eprints> * B<browsable fields> ).  You can automate running this with the B<cron> system.

You must have run B<generate_dtd> at some point before this script as it will need the dtd file(s).

=head1 ARGUMENTS

=over 8

=item B<archiveid> 

The ID of the eprint archive to use.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.

=back   

__GENERICPOD__

=cut

#cjg NOT doing noise right.
#cjg not aktually working...

use EPrints::EPrint;
use EPrints::Session;
use EPrints::Subject;

use File::Copy;
use File::Path;
use strict;
use Getopt::Long;
use Pod::Usage;

my $verbose = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => => \$help,
	'man' => => \$man,
	'verbose+' => \$verbose,
	'quiet' => \$quiet
) || pod2usage( 2 );
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 ); 

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = new EPrints::Session( 1 , $ARGV[0] , $noise );
exit( 1 ) unless( defined $session );

# cjg Would be nice to have multiple field browsing eg.
# "authors.id/editors.id" but that can be done later.

my $views = $session->get_archive()->get_conf( "browse_views" );

my $ds = $session->get_archive()->get_dataset( "archive" );

my $langid;
foreach $langid ( @{$session->get_archive()->get_conf( "languages" )} )
{
	$session->change_lang( $langid );
	my $dir =  $session->get_archive()->get_conf( "htdocs_path" )."/".$langid."/view";
	my $tmpdir = $dir."_tmp";
	my $doomdir = $dir."_toerase";

	if( -e $tmpdir ) { rmtree( $tmpdir ); }
	EPrints::Utils::mkdir( $tmpdir );

	foreach( @{$views} )
	{
		print "Making browse pages for: $langid/".$_->{id}."\n" if( $noise > 0 );
		make_view_pages( $_, $tmpdir, $ds, $noise );
	}

	# Make Browse Page which lists various views

	print "Making main browse index for: $langid ... " if( $noise > 1 );
	my( $ul, $li, $page, $a, $file, $title );
	$session->new_page();
	$page = $session->make_doc_fragment();
	$page->appendChild( $session->html_phrase( "bin/generate_views:browseintro" ) );
	$ul = $session->make_element( "ul" );
	foreach( @{$views} )
	{
		next if( $_->{nolink} );
		$li = $session->make_element( "li" );
		$a = $session->render_link( $_->{id}."/" );
		$a->appendChild( $session->make_text( $session->get_view_name( $ds, $_->{id} ) ) );
		$li->appendChild( $a );
		$ul->appendChild( $li );
	}
	$page->appendChild( $ul );
	
	$title = $session->html_phrase( "bin/generate_views:browsetitle" );
	$file = $tmpdir."/index.html";
	$session->build_page( $title, $page );
	$session->page_to_file( $file );
	print "done\n" if( $noise > 1 );

	print "Moving $langid views to be online ... " if( $noise > 1 );
	move( $dir, $doomdir );
	move( $tmpdir, $dir );
	rmtree( $doomdir );
	print "done\n" if( $noise > 1 );

}

$session->terminate();
exit;

sub make_view_pages
{
	my( $info, $viewdir, $ds, $noise ) = @_;

	my @fields;
	foreach( split( "/", $info->{fields} ) )
	{
		my $field = EPrints::Utils::field_from_config_string( $ds, $_ );
		unless( $field->is_browsable() )
		{
#cjg should abort here. Or maybe just log.
			print STDERR "Cannot generate browse pages for field \"".$_."\"\n";
			print STDERR "- Type \"".$field->get_type()."\" cannot be browsed.\n";
			next;
		}
		push @fields, $field;
	}
	if( scalar @fields == 0 ) { return; }

	my $order = $info->{order};

	my $dir = $viewdir."/".$info->{id};
	mkdir( $dir, 0775 ) or die "Can't make directory $dir: $!\n";

	my $field;
	my %v=();
	foreach $field ( @fields )
	{
		foreach( $field->get_values( $session ) ) 
		{ 
			if( !defined $_ ) { $_=""; }
			$v{$_}=1; 
		}
	}	
	unless( $info->{allow_null} ) { delete $v{""}; }
	my @values = keys %v;

	my( $value, $title, $file, $fileid );
	my( $ul, $li, $a, $page );

	#################################################
	##
	## Make Browse Pages

	my %size = ();

	$info->{dom} = 1 if( $info->{include} || !$info->{nohtml} );

	foreach $value ( sort @values )
	{
		$fileid = $value;
		if( $fileid eq "" ) { $fileid = "NULL"; }
		print "[".$info->{id}."] = \"$fileid\"\n" if( $noise > 1 );

		if( $info->{dom} )
		{
			$session->new_page();
			$page = $session->make_doc_fragment();
		}

		if( $fields[0]->is_type( "subject" ) && !$info->{nohtml} )
		{

			# Note, this only shows ancestors and children. You might want
			# Ancestors and decendents (children of children of ... )
			# No support yet, but easy to add.

			my $subject = EPrints::Subject->new( $session, $value );
			my @ids= @{$subject->get_value( "ancestors" )};
			foreach( $subject->children() )
			{
				push @ids,$_->get_value( "subjectid" );
			}

       			$page->appendChild( $session->render_subjects( 
					\@ids, $fields[0]->get_property( "top" ), $value, 2 ) );
			$page->appendChild( $session->render_ruler() );
		}

		my $searchexp = new EPrints::SearchExpression(
				custom_order=>$order,
				use_oneshot_cache=>1,
				satisfy_all=>0,
				session=>$session,
				dataset=>$ds );

       		$searchexp->add_field( \@fields, "PHR:EX:".$value );

		my $links = $session->make_doc_fragment();

		my $fn = sub { 
        		my( $session, $dataset, $item, $info ) = @_;

			if( $info->{dom} )
			{
				my $cite = $item->render_citation_link( $info->{citation} );
				unless( $info->{nowrapper} )
				{
					my $p = $session->make_element( "p" );
					$p->appendChild( $cite );
					$cite = $p;
				}
				$links->appendChild( $session->make_indent( 4 ) );
				$links->appendChild( $cite );
			}
		};
		
        	$searchexp->perform_search();
		my $count = $searchexp->count();
		if( $info->{dom} && !$info->{nocount} )
		{
			$links->appendChild( $session->html_phrase( "bin/generate_views:blurb",
				n=>$session->make_text( $count ) ) );
		}
		$size{$value} = $count;
		my %mapinfo = %{$info};
		$mapinfo{links} = $links;
		$searchexp->map( $fn, \%mapinfo );
		$searchexp->dispose();

		if( $info->{include} )
		{
			$file = $dir."/".$fileid.".include";
			print "Writing: $file\n" if( $noise > 1 );
			open( FILE, ">$file" );
			print FILE $links->toString;
			close FILE;
		}

		unless( $info->{nohtml} )
		{
			$page->appendChild( $links );

			$title = $session->html_phrase( "bin/generate_views:title", 
					viewname=>$session->make_text( $session->get_view_name( $ds, $info->{id} ) ),
					value=>$fields[0]->get_value_label( $session, $value ) );

			$file = $dir."/".$fileid.".html";
			$session->build_page( $title, $page );
			print "Writing: $file\n" if( $noise > 1 );
			$session->page_to_file( $file );
		}
	}

	return if( $info->{noindex} );

	#################################################
	##
	## Make Index Page

	$session->new_page();
	$page = $session->make_doc_fragment();
	$page->appendChild( $session->html_phrase( "bin/generate_views:intro" ) );

	if( $fields[0]->is_type( "subject" ) )
	{
        	$page->appendChild( $session->render_subjects( \@values, $fields[0]->get_property( "top" ), undef, 2, \%size ) );
	}
	else
	{
		$ul = $session->make_element( "ul" );
		# sorting the keys is not ideal, but better than nothing.
		foreach $value ( sort @values )
		{
			$fileid = $value;
			if( $fileid eq "" ) { $fileid = "NULL"; }
			$li = $session->make_element( "li" );
			$a = $session->render_link( $fileid.".html" );
			$a->appendChild( $fields[0]->get_value_label( $session, $value ) );
			$a->appendChild( $session->make_text( " (".$size{$value}.")" ) );
			$li->appendChild( $a );
			$ul->appendChild( $li );
		}
		$page->appendChild( $ul );
	}

	$title = $session->html_phrase( "bin/generate_views:indextitle", 
				viewname=>$session->make_text( $session->get_view_name( $ds, $info->{id} ) ) ),

	$file = $dir."/index.html";
	$session->build_page( $title, $page );
	print "Writing: $file\n" if( $noise > 1 );
	$session->page_to_file( $file );
}




