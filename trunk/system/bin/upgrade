#!/usr/bin/perl -w -I/opt/eprints/perl_lib

######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

=pod

=head1 NAME

B<upgrade> - Upgrade the stucture of the database to be compatable with
a newer version of eprints.

If upgrading requires more than one step then the system will perform
the upgrade step by step. If a step fails then you can continue from
where it left off.

=head1 SYNOPSIS

B<upgrade> I<archiveid> [B<options>]

=head1 DESCRIPTION

Some versions of eprints require modifications to be made to the database
tables used by earlier versions. 

Run this script on each archive after upgrading the eprints software. 

=head1 ARGUMENTS

=over 8

=item I<archiveid> 

The ID of the EPrint archive to effect.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

This option doesn't do anything. You REALLY don't want to run this
script without knowing what's happening.

=item B<--verbose>

Explain in detail what is going on. 
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

__GENERICPOD__

=cut



use EPrints::Database;
use EPrints::Session;
use EPrints::Subject;

use strict;
use Getopt::Long;
use Pod::Usage;

my $TARGET = $EPrints::Database::DBVersion;

my $verbose = 0;
my $version = 0;
my $quiet = 0;
my $help = 0;
my $man = 0;

GetOptions( 
	'help|?' => \$help,
	'man' => => \$man,
	'verbose+' => \$verbose,
	'version' => \$version,
	'silent' => \$quiet,
	'quiet' => \$quiet
) || pod2usage( 2 );
EPrints::Utils::cmd_version( "upgrade" ) if $version;
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV != 1 ); 

my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1+$verbose if( $verbose );

# Set STDOUT to auto flush (without needing a \n)
$|=1;

my $session = new EPrints::Session( 1, $ARGV[0], $noise, 1 );
exit( 1 ) unless defined $session;

if( $noise>=1 ) { print "What is the current compatability of the DB?\n"; }
my $db = $session->get_db();
my $dbversion = $db->get_version();
if( !defined $dbversion )
{
	if( $noise>=1 ) { print "...No version flag. Must be pre 2.1\n"; }
	$dbversion = "2.0";
	if( $noise>=1 ) { print "Setting version to be 2.0\n"; }
	$db->create_version_table;
	$db->set_version( $dbversion );
}
else
{
	print "...DB Tables compatable with ".$dbversion."\n"; 
}	
if( $noise>=1 ) 
{ 
	print "Target compatablity is ".$TARGET."\n"; 
}

if( $dbversion eq "2.0" )
{
	my $sql;
	print <<END;
======================================================================
About to upgrade tables from 2.0 to 2.1

This will:

 * Erase the subscription tables. (If you have an active subscription
   service running on this archive then somethings wrong. Stop right
   now and figure it out.

 * Rebuild the subscription dataset tables how v2.1 wants them.

 * Set the subscription ID counter to zero.

Are you sure you want to do this? (yes/no)
END
	
	my $input = <STDIN>;
	chomp( $input );
	if( $input ne "yes" )
	{
		print "Aborting then.\n";
		$session->terminate();
		exit( 1 );
	}

	# drop all the old subscription tables
	my @tables = $db->get_tables;
	foreach my $table ( @tables )
	{
		if( $table =~ m/^subscription/ )
		{
			$sql = "DROP TABLE ".$table;
			$db->do( $sql );
		}
	}
	my $subs_ds = $session->get_archive->get_dataset( "subscription" );
	$db->create_dataset_tables( $subs_ds );
	$sql = "DELETE FROM counters WHERE countername = 'subscriptionid'"; 
	$db->do( $sql );
	$sql = "INSERT INTO counters (countername,counter) VALUES ".
		"( 'subscriptionid' , 0 )";
	$db->do( $sql );

	print "\n2.0 -> 2.1 done!\n";

	$dbversion = "2.1";
	$db->set_version( $dbversion );
}

if( $TARGET eq $dbversion)
{
	if( $noise>=1 )
	{
		print "Target compatablity reached.\n";
	}
}
else
{
	print <<END;
**********************************************************************
WARNING: Target compatablity NOT reached. That probably means 
something bad happend.
**********************************************************************
END
}

$session->terminate();
exit;
