#!/usr/bin/perl
use EPrints;
use Data::Dumper;

use strict;
my $session = new EPrints::Session;
exit( 0 ) unless( defined $session );

my $base_url = $session->get_repository->get_conf( "perl_url" )."/rest";

my $path_info = $session->get_request->path_info;
if( $path_info eq "" )
{
	$session->redirect( $base_url.'/' );
}
elsif( ! $path_info =~ m/^\// )
{
	error( $session, 404, "WTF?: $path_info" );
}
else
{
	my @path = split( '/', $path_info );
	shift @path;
	if( $path_info =~ m/\/$/ ) { push @path, ""; }
	serve_top_level( $session, @path );
}

$session->terminate;

exit;


##############################

sub serve_top_level
{
	my( $session, @path ) = @_;

	# /
	if( @path == 1 && $path[0] eq "" )
	{
		$session->send_http_header( "content_type"=>"text/html" );
		my @ds_ids = $session->get_repository->get_dataset_ids;
		print "<ul>\n";
		foreach my $ds_id ( @ds_ids )
		{
			my $dataset = $session->get_repository->get_dataset( $ds_id );
			next if $dataset->confid ne $ds_id;
			print "<li><a href='$ds_id/'>$ds_id</a></li>\n";
		}
		print "</ul>\n";
		return;
	}

	# /eprint
	if( @path == 1 )
	{
		$session->redirect( $base_url.$path_info."/" );
		return;
	}

	# /eprint/
	my $dataset_id = shift @path;

	my $dataset = $session->get_repository->get_dataset( $dataset_id ); 
	if( !defined $dataset )
	{
		error( $session, 404, "Not Found" );
		return;
	}


	return serve_dataset( $session, $dataset, @path );
}
	
sub serve_dataset
{
	my( $session, $dataset, @path ) = @_;

	my $file = shift @path;

	if( scalar @path == 0 )
	{
		# /
		if( $file eq "" )
		{
			return unless allowed_methods( $session, "GET" );
			my $ul = "<ul>";
			foreach my $id ( sort { $a <=> $b } @{$dataset->get_item_ids( $session )} )
			{
				$ul .= "<li><a href='$id/'>$id/</a></li>\n";
				$ul .= "<li><a href='$id.xml'>$id.xml</a></li>\n";
			}
			$ul .= "</ul>";
			$session->send_http_header( "content_type"=>"text/html" );
			print render_html( $ul );
			return;
		}

		# /23
		if( $file =~ m/^\d+$/ )
		{
			$session->redirect( $base_url.$path_info."/" );
			return;
		}

		my( $item_id, $format) = split( /\./, $file, 2 );
		my $object = $dataset->get_object( $session, $item_id );
		if( !defined $object )
		{
			error( $session, 404, "Object $item_id Not Found" );
			return;
		}

		if( defined $format && $format eq "xml" )
		{
			return unless allowed_methods( $session, "GET","PUT" );
			my $method = $ENV{REQUEST_METHOD};
			if( $method eq "GET" )
			{
				get_dataobj_xml( $session, $object );
			}
			if( $method eq "PUT" )
			{
				put_dataobj_xml( $session, $object );
			}
			return;
		}

		error( $session, 404, "Not Found" );
		return;
	}

	# /23/	
	my $object = $dataset->get_object( $session, $file );
	if( !defined $object )
	{
		error( $session, 404, "Object $file Not Found" );
		return;
	}

	return serve_dataobj( $session, $object, @path );
}


sub serve_dataobj
{
	my( $session, $object, @path ) = @_;

	return unless allow_priv( $object->get_dataset->confid."/view", $session, $object );

	my $file = shift @path;
	
	if( scalar @path == 0 )
	{
		# /
		if( $file eq "" )
		{
			return unless allowed_methods( $session, "GET" );
			my $c = "<ul>";
			foreach my $field ( $object->get_dataset->get_fields )
			{
				my $name = $field->get_name;
				$c.="<li><a href='$name.xml'>$name.xml</a></li>";
				if( $field->get_property( "multiple" )
		 		 || $field->is_type( "compound","subobject","name" ) )
				{
					$c.="<li><a href='$name/'>$name/</a></li>";
				}
				else
				{
					$c.="<li><a href='$name.txt'>$name.txt</a></li>";
				}
			}
			$c.= "</ul>";
			$session->send_http_header( "content_type"=>"text/html" );
			print render_html( $c );
			return;
		}

		my( $field_name, $format) = split( /\./, $file, 2 );
		my $field = $object->get_dataset->get_field( $field_name );	
		if( !defined $field )
		{
			error( $session, 404, "Field Not Found: $field_name" );
			return;
		}

		if( $field->get_property( "multiple" )
 		 || $field->is_type( "compound","subobject","name" ) )
		{
			if( $file eq $field_name ) # ie no . in it
			{
				# /title
				$session->redirect( $base_url.$path_info."/" );
				return;
			}
		}
		else
		{
			if( $format eq "txt" )
			{
				# /title.txt
				return unless allowed_methods( $session, "GET","PUT" );
				my $method = $ENV{REQUEST_METHOD};
				if( $method eq "GET" )
				{
					get_field_txt( $session, $object, $field );
				}
				if( $method eq "PUT" )
				{
					put_field_txt( $session, $object, $field );
				}
				return;
			}	
		}

		if( $format eq "xml" )
		{
			# /title.xml
			return unless allowed_methods( $session, "GET","PUT" );
			my $method = $ENV{REQUEST_METHOD};
			if( $method eq "GET" )
			{
				get_field_xml( $session, $object, $field );
			}
			if( $method eq "PUT" )
			{
				put_field_xml( $session, $object, $field );
			}
			return;
		}	

		error( $session, 404, "Not Found" );
		return;
	}

	# /title/
	my $field = $object->get_dataset->get_field( $file );	
	if( !defined $field )
	{
		error( $session, 404, "Field Not Found: $file" );
		return;
	}

	my $v = $object->get_value( $file );

	return serve_field( $session, $object, $field, $v, @path );
}


sub serve_field
{
	my( $session, $object, $field, $value, @path ) = @_;

	if( !$field->get_property( "multiple" ) )
	{
		return serve_field_single( $session, $object, $field, $value, @path );
	}

	my $file = shift @path;

	if( scalar @path == 0 )
	{
		# /
		if( $file eq "" )
		{
			return unless allowed_methods( $session, "GET" );
			my $c = "<ul>";
			$c.= "<li><a href='size.txt'>size.txt</a></li>";
			for( my $i=0; $i<scalar @{$value}; ++$i )
			{
				my $n = $i + 1;
 				if( $field->is_type( "subobject" ) )
				{
					$c.="<li><a href='$n/'>$n/</a></li>";
					$c.="<li><a href='$n.xml'>$n.xml/</a></li>";
				}
 				elsif( $field->is_type( "compound","name" ) )
				{
					$c.="<li><a href='$n/'>$n/</a></li>";
				}
				else
				{
					$c.="<li><a href='$n.txt'>$n.txt</a></li>";
				}
			}
			$c.="</ul>";
			$session->send_http_header( "content_type"=>"text/html" );
			print render_html( $c );
			return;
		}

		if( $file eq "size.txt" )
		{
			return unless allowed_methods( $session, "GET" );
			$session->send_http_header( "content_type"=>"text/plain" );
			print scalar( @{$value} );
			return;
		}
	
		my( $n, $format ) = split( /\./, $file, 2 );

		if( $format eq "xml" && $field->is_type( "subobject" ) )
		{
			return unless allowed_methods( $session, "GET","PUT" );
			$session->send_http_header( "content_type"=>"text/xml" );
			print "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
			print $object->export( "XML" );
			return;
		}

		if( !EPrints::Utils::is_set( $value->[$n-1] ) )
		{
			error( $session, 404, "Not Found" );
			return;
		}

		if( $field->is_type( "compound","subobject","name" ) )
		{
			if( $file eq $n ) # ie no . in it
			{
				# /3
				$session->redirect( $base_url.$path_info."/" );
				return;
			}
		}
		else
		{
			if( $format eq "txt" )
			{
				# /3.txt
				return unless allowed_methods( $session, "GET" );
				$session->send_http_header( "content_type"=>"text/plain" );
				print $value->[$n-1];
				return;
			}
		}
		error( $session, 404, "Not Found" );
		return;
	}

	if( $file !~ m/^\d+$/ )
	{
		error( $session, 404, "Not Found" );
		return;
	}	

	my $i = $file-1;
	if( !EPrints::Utils::is_set( $value->[$i] ) )
	{
		error( $session, 404, "Not Found" );
		return;
	}

	# /3/
	return serve_field_single( $session, $object, $field, $value->[$i], @path );
}

sub serve_field_single
{
	my( $session, $object, $field, $value, @path ) = @_;

	if( $field->is_type( "subobject" ) )
	{
		return serve_subobject( $session, $object, $field, $value, @path );
	}
	if( $field->is_type( "compound" ) )
	{
		return serve_compound( $session, $object, $field, $value, @path );
	}
	if( $field->is_type( "name" ) )
	{
		return serve_name( $session, $object, $field, $value, @path );
	}
	
	error( $session, 500, "Unknown field type in serve_field_single()" );
}

sub serve_subobject
{
	my( $session, $object, $field, $value, @path ) = @_;

	my $ds = $session->get_repository->get_dataset( $field->get_property('datasetid') );

	return serve_dataobj( $session, $value, @path );
}


sub serve_compound
{
	my( $session, $object, $field, $value, @path ) = @_;

	my $file = shift @path;

	my $f = $field->get_property( "fields_cache" );
	my %fieldname_to_alias = $field->get_fieldname_to_alias;
	my %alias_to_fieldname = $field->get_alias_to_fieldname;

	if( scalar @path == 0 )
	{
		if( $file eq "")
		{
			# /
			return unless allowed_methods( $session, "GET" );
			my $c = "<ul>";
			foreach my $sub_field ( @{$f} )
			{
				my $fieldname = $sub_field->get_name;
				my $alias = $fieldname_to_alias{$fieldname};
				if( $sub_field->is_type( "compound","subobject","name" ) )
				{
					$c.="<li><a href='$alias/'>$alias/</a></li>";
				}
				else
				{
					$c.="<li><a href='$alias.txt'>$alias.txt</a></li>";
				}
			
			}
			$c .= "</ul>";
			$session->send_http_header( "content_type"=>"text/html" );
			print render_html( $c );
			return;
		}

		my( $part, $format ) = split( /\./, $file, 2 );

		my $fieldname = $alias_to_fieldname{$part};
		if( !defined $fieldname )
		{
			error( $session, 404, "Not Found" );
			return;
		}
		my $sub_field = $object->get_dataset->get_field( $fieldname );

		if( $part eq $file )
		{
			# /foo
			$session->redirect( $base_url.$path_info."/" );
			return;
		}

		# /foo.txt
		if( !$sub_field->is_type( "compound","subobject","name" ) && $format eq "txt" )
		{
			return unless allowed_methods( $session, "GET" );
			$session->send_http_header( "content_type"=>"text/plain" );
			print $value->{$part};
			return;
		}

		error( $session, 404, "Not Found" );
		return;
	}

	my $fieldname = $alias_to_fieldname{$file};
	if( !defined $fieldname )
	{
		error( $session, 404, "Not Found" );
		return;
	}
	my $sub_field = $object->get_dataset->get_field( $fieldname );

	# /foo/
	if( $sub_field->is_type( "compound","subobject","name" ) )
	{
		return serve_field_single( $session, $object, $sub_field, $value->{$file}, @path );
	}
	
	error( $session, 404, "Not Found" );
}

sub serve_name
{
	my( $session, $object, $field, $value, @path ) = @_;

	my $file = shift @path;

	if( scalar @path == 0 )
	{
		# /
		if( $file eq "" )
		{
			return unless allowed_methods( $session, "GET" );
			my $c = <<END;
<ul>
<li><a href='honourific.txt'>honourific.txt</a></li>
<li><a href='given.txt'>given.txt</a></li>
<li><a href='family.txt'>family.txt</a></li>
<li><a href='lineage.txt'>lineage.txt</a></li>
</ul>
END
			$session->send_http_header( "content_type"=>"text/html" );
			print render_html( $c );
			return;
		}

		if( $file =~ m/^(honourific|given|family|lineage)\.txt$/ )
		{
			# /given.txt
			return unless allowed_methods( $session, "GET" );
			my $v = $value->{$1} || "";
			$session->send_http_header( "content_type"=>"text/plain" );
			print $v;
			return;
		}
	}

	error( $session, 404, "Not Found" );
	return;
}

sub error
{
	my( $session, $code, $msg ) = @_;

	print "$msg\n";
}


sub render_html
{
	my( $html ) = @_;

	return <<END;
<html>
  <head><title>RESTful EPrints Interface</title></head>
  <body>
    <h1>RESTful EPrints Interface</h1>
$html
  </body>
</html>
END
}

sub allowed_methods
{
	my( $session, @methods ) = @_;

	my $method = $ENV{REQUEST_METHOD};
	if( $method eq "OPTIONS" )
	{
		EPrints::Apache::AnApache::header_out( 
			$session->get_request,
			"Content-Length" => 0 );
		EPrints::Apache::AnApache::header_out( 
			$session->get_request,
			"Allow" => "OPTIONS,".join( ",", @methods ) );
		EPrints::Apache::AnApache::send_http_header( $session->get_request );
		return 0;
	}

	foreach my $m ( @methods ) { return 1 if $m eq $method; }

	EPrints::Apache::AnApache::send_status_line( 
			$session->get_request,
			501,
			"Method Not Implemented" );
	EPrints::Apache::AnApache::send_http_header( $session->get_request );

	return 0;
}

sub get_dataobj_xml
{
	my( $session, $object ) = @_;

	return unless allow_get_dataobj( $object->get_dataset->confid."/view", $session, $object );

	$session->send_http_header( "content_type"=>"text/xml" );
	print "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
	print $object->export( "XML" );
}

sub put_dataobj_xml
{
	my( $session, $object ) = @_;

	return unless allow_priv( $object->get_dataset->confid."/staff/edit", $session, $object );

	$session->send_http_header( "content_type"=>"text/plain" );
	print "NOT DONE YET\n";
}

sub get_field_txt
{
	my( $session, $object, $field ) = @_;

	return unless allow_priv( $object->get_dataset->confid."/view", $session, $object );

	$session->send_http_header( "content_type"=>"text/plain" );
	print $object->get_value( $field->get_name );
}

sub get_field_xml
{
	my( $session, $object, $field ) = @_;

	return unless allow_priv( $object->get_dataset->confid."/view", $session, $object );

	$session->send_http_header( "content_type"=>"text/xml" );
	print "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
	print EPrints::XML::to_string( $field->to_xml( $session, $object->get_value( $field->get_name ), $object->get_dataset ));
}

sub put_field_xml
{
	my( $session, $object, $field ) = @_;

	if( $field->get_name eq $object->get_dataset->get_key_field->get_name || $field->get_name eq "rev_number" )
	{
		my $r = $session->get_request;
		EPrints::Apache::AnApache::send_status_line( $r, 403, "Forbidden" );
	}
	return unless allow_priv( $object->get_dataset->confid."/staff/edit", $session, $object );

	$session->send_http_header( "content_type"=>"text/plain" );
	print "NOT DONE YET\n";
}

sub put_field_txt
{
	my( $session, $object, $field ) = @_;

	if( $field->get_name eq $object->get_dataset->get_key_field->get_name || $field->get_name eq "rev_number" )
	{
		my $r = $session->get_request;
		EPrints::Apache::AnApache::send_status_line( $r, 403, "Forbidden" );
	}
	return unless allow_priv( $object->get_dataset->confid."/staff/edit", $session, $object );

	$object->set_value( $field->get_name, $session->{putdata} );
	$object->commit;
	$session->send_http_header( "content_type"=>"text/plain" );
	print "OK\n";
}

sub allow_priv
{
	my( $priv, $session, $object ) = @_;

	if( $priv =~ m/^eprint\// )
	{
		my $status = $object->get_value( "eprint_status" );
		$priv =~ s/^eprint\//eprint\/$status\//;	
	}

	return 1 if( $session->allow_anybody( $priv ) );
	return 1 if( $priv eq "eprint/archive/view" );

	my $r = $session->get_request;
	$r->auth_type( "Basic" );
	$r->auth_name( "EPrintsREST" );
	my ($status, $password) = $r->get_basic_auth_pw;
	my $username = $r->user;

	if( !$session->valid_login( $username, $password ) )
	{
		$r->note_basic_auth_failure;
		EPrints::Apache::AnApache::send_status_line( $r, 401, "Auth Required" );
		return 0;
	}

	my $user = EPrints::DataObj::User::user_with_username( $session, $username );

	if( !defined $user )
	{
		print STDERR "Unknown user.\n";
		return 0;
	}

	if( !$user->allow( $priv, $object ) )
	{
		EPrints::Apache::AnApache::send_status_line( $r, 403, "Forbidden" );
		return 0;
	}

	return 1;
}


