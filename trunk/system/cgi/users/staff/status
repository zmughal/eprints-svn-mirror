######################################################################
#
#  EPrints Staff Status Page
#
######################################################################
#
#  __COPYRIGHT__
#
# Copyright 2000-2008 University of Southampton. All Rights Reserved.
# 
#  __LICENSE__
#
######################################################################

use EPrints::Session;
use EPrints::HTMLRender;
use EPrints::Database;
use EPrints::EPrint;
use EPrints::User;
use EPrints::Version;

use Filesys::DiskSpace;

use strict;

my $session = new EPrints::Session;

my( $html );

my $rows;

# Number of users in each group
my $num_users = count( "user" );
print STDERR "NUMUSERS...... $num_users\n";
my %num_users;

my $usertypes = $session->get_site()->get_data_set( "user" )->get_types();

my $usertype;
foreach $usertype ( @{$usertypes} )
{
	print STDERR "triying($usertype)=\n";
	my $count = count( "user", usertype => $usertype );
	$num_users{ $usertype } = $count;
	print STDERR "($usertype)=$count\n";
}
exit;
# Number of submissions in workspace
$rows = $session->{database}->retrieve( EPrints::Database::table_name( "inbox" ),
                                        [ "eprintid" ] );

my $num_inbox = scalar @$rows;

# Number of submissions in buffer
$rows = $session->{database}->retrieve( EPrints::Database::table_name( "buffer" ),
                                        [ "eprintid" ] );

my $num_buffer = scalar @$rows;

# Number of submissions in archive
$rows = $session->{database}->retrieve( EPrints::Database::table_name( "archive" ),
                                        [ "eprintid" ] );

my $num_archive = scalar @$rows;

# Number of deleted eprints

$rows = $session->{database}->retrieve( EPrints::Database::table_name( "deletion" ),
                                        [ "eprintid" ] );

my $num_deleted = scalar @$rows;

# Number of subscriptions
$rows = $session->{database}->retrieve( EPrints::Database::table_name( "subscription" ),
                                        [ "subid" ] );

my $num_subs = scalar @$rows;


my $db_status = ( $num_users > 0 ? "OK" : "DOWN" );


# Get available directories
opendir DOCSTORE, $session->get_site()->{local_document_root}
	or return( undef );
# The grep here just removes the "." and ".." directories
my @avail = grep !/^\.\.?$/, readdir DOCSTORE;
closedir DOCSTORE;

# Write the results to a table
print "<CENTER><TABLE BORDER=0>\n";


&print_row( "EPrints Release:", $EPrints::Version::eprints_software_version );

&print_row( "Database Status:", $db_status );

&print_row( "", "" );

foreach $usertype ( keys %num_users )
{
	#lang cjg
	&print_row( $usertype, $num_users{$usertype} );
}
&print_row( "Total Users:", $num_users );

&print_row( "", "" );

&print_row( "Articles in archive:", $num_archive );
&print_row( "Articles in buffer:", $num_buffer );
&print_row( "Articles in workspace:", $num_inbox );
&print_row( "Deleted Articles:", $num_deleted );

&print_row( "", "" );

&print_row( "Subscriptions:", $num_subs );

&print_row( "", "" );

my $best_size = 0;

foreach( @avail )
{
	my $size = ( df "$session->get_site()->{local_document_root}/$_" )[3];
	&print_row( "Document partition $_:", int($size/1024)."Mb free" );

	$best_size = $size if( $size > $best_size );
}

print "</TABLE></CENTER>\n";

if( $best_size < $session->get_site()->{diskspace_error_threshold} )
{
	print "<CENTER><P><STRONG><FONT COLOR=RED>NO SPACE LEFT FOR EPRINTS!".
		"</FONT></STRONG></P></CENTER>\n";
}
elsif( $best_size < $session->get_site()->{diskspace_warn_threshold} )
{
	print "<CENTER><P><STRONG><FONT COLOR=RED>WARNING:</FONT></STRONG> ".
		"Available space for new EPrints running low</P></CENTER>\n";
}

print "<P><CENTER><A HREF=\"$session->get_site()->{server_static}/staff/\">".
	"Click here to return to the Staff Area</A></CENTER></P>\n";

print $session->{render}->start_html( "Server Status" );
print $session->{render}->end_html();

$session->terminate();


sub print_row
{
	my( $key, $val ) = @_;
	
	print "<TR><TD><STRONG>$key</STRONG></TD><TD ALIGN=right>$val</TD></TR>\n";
}

sub count
{
	my( $datasetid, %searchfields ) = @_;
		
	my $dataset = $session->get_site()->get_data_set( $datasetid );

	my $searchexp = new EPrints::SearchExpression(
		session => $session,
		dataset => $dataset,
		fieldnames => [] );

	my $searchfield;
	foreach $searchfield ( keys %searchfields )
	{
		$searchexp->add_field(
			$dataset->get_field( $searchfield ),
			"PHR:EQ:".$searchfields{ $searchfield } );
	}

	$searchexp->perform_search();

	return $searchexp->count();
}
